//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GLSL_ES300Parser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GLSL_ES300Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FloatingLiteral=1, IntegerLiteral=2, BoolLiteral=3, Whitespace=4, Newline=5, 
		BlockComment=6, LineComment=7, Struct=8, Const=9, In=10, Out=11, InOut=12, 
		Uniform=13, CentroidIn=14, CentroidOut=15, Precision=16, PrecisionLow=17, 
		PrecisionMedium=18, PrecisionHigh=19, True=20, False=21, If=22, Else=23, 
		Switch=24, Case=25, Default=26, While=27, Do=28, For=29, Continue=30, 
		Break=31, Return=32, Discard=33, Invariant=34, Layout=35, Smooth=36, Flat=37, 
		Plus=38, Minus=39, Mul=40, Div=41, Pipe=42, Percent=43, Bang=44, Tilde=45, 
		Assign=46, NotEqual=47, Ampersand=48, Caret=49, Greater=50, Less=51, LessOrEqual=52, 
		GreaterOrEqual=53, Left=54, Right=55, And=56, Or=57, Xor=58, Equal=59, 
		MulAssign=60, DivAssign=61, ModAssign=62, AddAssign=63, SubAssign=64, 
		LeftAssign=65, RightAssign=66, AndAssign=67, XorAssign=68, OrAssign=69, 
		Increment=70, Decrement=71, Semicolon=72, Colon=73, Comma=74, Dot=75, 
		LeftBrace=76, RightBrace=77, LeftParen=78, RightParen=79, LeftBracket=80, 
		RightBracket=81, Question=82, Void_type=83, Bool_type=84, Int_type=85, 
		Uint_type=86, Float_type=87, Vec2_type=88, Vec3_type=89, Vec4_type=90, 
		Bvec2_type=91, Bvec3_type=92, Bvec4_type=93, Ivec2_type=94, Ivec3_type=95, 
		Ivec4_type=96, Uvec2_type=97, Uvec3_type=98, Uvec4_type=99, Mat2_type=100, 
		Mat3_type=101, Mat4_type=102, Mat2x2_type=103, Mat2x3_type=104, Mat2x4_type=105, 
		Mat3x2_type=106, Mat3x3_type=107, Mat3x4_type=108, Mat4x2_type=109, Mat4x3_type=110, 
		Mat4x4_type=111, Sampler2D_type=112, Sampler3D_type=113, SamplerCube_type=114, 
		SamplerCubeShadow_type=115, Sampler2DShadow_type=116, Sampler2DArray_type=117, 
		Sampler2DArrayShadow_type=118, Isampler2D_type=119, Isampler3D_type=120, 
		IsamplerCube_type=121, Isampler2DArray_type=122, Usampler2D_type=123, 
		Usampler3D_type=124, UsamplerCube_type=125, Usampler2DArray_type=126, 
		VersionMarker300ES=127, Identifier=128;
	public const int
		RULE_translation_unit = 0, RULE_external_declaration_list = 1, RULE_shader_version_marker = 2, 
		RULE_external_declaration = 3, RULE_function_definition = 4, RULE_declaration = 5, 
		RULE_declarator = 6, RULE_declaratorlist = 7, RULE_initializer = 8, RULE_assignment_expression = 9, 
		RULE_multiplicative_expression = 10, RULE_additive_expression = 11, RULE_shift_expression = 12, 
		RULE_relational_expression = 13, RULE_equality_expression = 14, RULE_and_expression = 15, 
		RULE_exclusive_or_expression = 16, RULE_inclusive_or_expression = 17, 
		RULE_logical_and_expression = 18, RULE_logical_xor_expression = 19, RULE_logical_or_expression = 20, 
		RULE_conditional_expression = 21, RULE_unary_expression = 22, RULE_field_selection = 23, 
		RULE_postfix_expression = 24, RULE_function_call_generic = 25, RULE_function_call_header_no_parameters = 26, 
		RULE_function_call_header_with_parameters = 27, RULE_function_call_header = 28, 
		RULE_function_identifier = 29, RULE_variable_identifier = 30, RULE_integer_expression = 31, 
		RULE_expression = 32, RULE_primary_expression = 33, RULE_function_prototype = 34, 
		RULE_function_declarator = 35, RULE_function_header = 36, RULE_function_parameters = 37, 
		RULE_parameter_declaration = 38, RULE_parameter_declarator = 39, RULE_precision_qualifier = 40, 
		RULE_parameter_qualifier = 41, RULE_parameter_type_qualifier = 42, RULE_compound_statement = 43, 
		RULE_statementlist = 44, RULE_statement = 45, RULE_simple_statement = 46, 
		RULE_jump_statement = 47, RULE_condition = 48, RULE_iteration_statement = 49, 
		RULE_for_init_statement = 50, RULE_for_rest_statement = 51, RULE_case_label = 52, 
		RULE_switch_statement = 53, RULE_selection_statement = 54, RULE_expression_statement = 55, 
		RULE_declaration_statement = 56, RULE_constant_expression = 57, RULE_fully_specified_type = 58, 
		RULE_literal = 59, RULE_struct_declaratorlist = 60, RULE_struct_declarationlist = 61, 
		RULE_struct_declaration = 62, RULE_struct_specifier = 63, RULE_type_qualifier = 64, 
		RULE_interpolation_qualifier = 65, RULE_layout_qualifier_id = 66, RULE_layout_qualifier_idlist = 67, 
		RULE_layout_qualifier = 68, RULE_invariant_qualifier = 69, RULE_storage_qualifier = 70, 
		RULE_unary_operator = 71, RULE_assignment_operator = 72, RULE_type_specifier = 73, 
		RULE_type_specifier_noprec = 74, RULE_type_specifier_nonarray = 75;
	public static readonly string[] ruleNames = {
		"translation_unit", "external_declaration_list", "shader_version_marker", 
		"external_declaration", "function_definition", "declaration", "declarator", 
		"declaratorlist", "initializer", "assignment_expression", "multiplicative_expression", 
		"additive_expression", "shift_expression", "relational_expression", "equality_expression", 
		"and_expression", "exclusive_or_expression", "inclusive_or_expression", 
		"logical_and_expression", "logical_xor_expression", "logical_or_expression", 
		"conditional_expression", "unary_expression", "field_selection", "postfix_expression", 
		"function_call_generic", "function_call_header_no_parameters", "function_call_header_with_parameters", 
		"function_call_header", "function_identifier", "variable_identifier", 
		"integer_expression", "expression", "primary_expression", "function_prototype", 
		"function_declarator", "function_header", "function_parameters", "parameter_declaration", 
		"parameter_declarator", "precision_qualifier", "parameter_qualifier", 
		"parameter_type_qualifier", "compound_statement", "statementlist", "statement", 
		"simple_statement", "jump_statement", "condition", "iteration_statement", 
		"for_init_statement", "for_rest_statement", "case_label", "switch_statement", 
		"selection_statement", "expression_statement", "declaration_statement", 
		"constant_expression", "fully_specified_type", "literal", "struct_declaratorlist", 
		"struct_declarationlist", "struct_declaration", "struct_specifier", "type_qualifier", 
		"interpolation_qualifier", "layout_qualifier_id", "layout_qualifier_idlist", 
		"layout_qualifier", "invariant_qualifier", "storage_qualifier", "unary_operator", 
		"assignment_operator", "type_specifier", "type_specifier_noprec", "type_specifier_nonarray"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'struct'", "'const'", 
		"'in'", "'out'", "'inout'", "'uniform'", "'centroid in'", "'centroid out'", 
		"'precision'", "'lowp'", "'mediump'", "'highp'", "'true'", "'false'", 
		"'if'", "'else'", "'switch'", "'case'", "'default'", "'while'", "'do'", 
		"'for'", "'continue'", "'break'", "'return'", "'discard'", "'invariant'", 
		"'layout'", "'smooth'", "'flat'", "'+'", "'-'", "'*'", "'/'", "'|'", "'%'", 
		"'!'", "'~'", "'='", "'!='", "'&'", "'^'", "'>'", "'<'", "'<='", "'>='", 
		"'<<'", "'>>'", "'&&'", "'||'", "'^^'", "'=='", "'*='", "'/='", "'%='", 
		"'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", "'++'", "'--'", 
		"';'", "':'", "','", "'.'", "'{'", "'}'", "'('", "')'", "'['", "']'", 
		"'?'", "'void'", "'bool'", "'int'", "'uint'", "'float'", "'vec2'", "'vec3'", 
		"'vec4'", "'bvec2'", "'bvec3'", "'bvec4'", "'ivec2'", "'ivec3'", "'ivec4'", 
		"'uvec2'", "'uvec3'", "'uvec4'", "'mat2'", "'mat3'", "'mat4'", "'mat2x2'", 
		"'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", 
		"'mat4x3'", "'mat4x4'", "'sampler2D'", "'sampler3D'", "'samplerCube'", 
		"'samplerCubeShadow'", "'sampler2DShadow'", "'sampler2DArray'", "'sampler2DArrayShadow'", 
		"'isampler2D'", "'isampler3D'", "'isamplerCube'", "'isampler2DArray'", 
		"'usampler2D'", "'usampler3D'", "'usamplerCube'", "'usampler2DArray'", 
		"'#version 300 es'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FloatingLiteral", "IntegerLiteral", "BoolLiteral", "Whitespace", 
		"Newline", "BlockComment", "LineComment", "Struct", "Const", "In", "Out", 
		"InOut", "Uniform", "CentroidIn", "CentroidOut", "Precision", "PrecisionLow", 
		"PrecisionMedium", "PrecisionHigh", "True", "False", "If", "Else", "Switch", 
		"Case", "Default", "While", "Do", "For", "Continue", "Break", "Return", 
		"Discard", "Invariant", "Layout", "Smooth", "Flat", "Plus", "Minus", "Mul", 
		"Div", "Pipe", "Percent", "Bang", "Tilde", "Assign", "NotEqual", "Ampersand", 
		"Caret", "Greater", "Less", "LessOrEqual", "GreaterOrEqual", "Left", "Right", 
		"And", "Or", "Xor", "Equal", "MulAssign", "DivAssign", "ModAssign", "AddAssign", 
		"SubAssign", "LeftAssign", "RightAssign", "AndAssign", "XorAssign", "OrAssign", 
		"Increment", "Decrement", "Semicolon", "Colon", "Comma", "Dot", "LeftBrace", 
		"RightBrace", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
		"Question", "Void_type", "Bool_type", "Int_type", "Uint_type", "Float_type", 
		"Vec2_type", "Vec3_type", "Vec4_type", "Bvec2_type", "Bvec3_type", "Bvec4_type", 
		"Ivec2_type", "Ivec3_type", "Ivec4_type", "Uvec2_type", "Uvec3_type", 
		"Uvec4_type", "Mat2_type", "Mat3_type", "Mat4_type", "Mat2x2_type", "Mat2x3_type", 
		"Mat2x4_type", "Mat3x2_type", "Mat3x3_type", "Mat3x4_type", "Mat4x2_type", 
		"Mat4x3_type", "Mat4x4_type", "Sampler2D_type", "Sampler3D_type", "SamplerCube_type", 
		"SamplerCubeShadow_type", "Sampler2DShadow_type", "Sampler2DArray_type", 
		"Sampler2DArrayShadow_type", "Isampler2D_type", "Isampler3D_type", "IsamplerCube_type", 
		"Isampler2DArray_type", "Usampler2D_type", "Usampler3D_type", "UsamplerCube_type", 
		"Usampler2DArray_type", "VersionMarker300ES", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GLSL_ES300Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GLSL_ES300Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GLSL_ES300Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GLSL_ES300Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Translation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GLSL_ES300Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Shader_version_markerContext shader_version_marker() {
			return GetRuleContext<Shader_version_markerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_declaration_listContext external_declaration_list() {
			return GetRuleContext<External_declaration_listContext>(0);
		}
		public Translation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterTranslation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitTranslation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Translation_unitContext translation_unit() {
		Translation_unitContext _localctx = new Translation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VersionMarker300ES) {
				{
				State = 152;
				shader_version_marker();
				}
			}

			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 257698164480L) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52776558133247L) != 0)) {
				{
				State = 155;
				external_declaration_list(0);
				}
			}

			State = 158;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_declaration_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public External_declarationContext external_declaration() {
			return GetRuleContext<External_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_declaration_listContext external_declaration_list() {
			return GetRuleContext<External_declaration_listContext>(0);
		}
		public External_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_declaration_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterExternal_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitExternal_declaration_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_declaration_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_declaration_listContext external_declaration_list() {
		return external_declaration_list(0);
	}

	private External_declaration_listContext external_declaration_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		External_declaration_listContext _localctx = new External_declaration_listContext(Context, _parentState);
		External_declaration_listContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_external_declaration_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 161;
			external_declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new External_declaration_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_external_declaration_list);
					State = 163;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 164;
					external_declaration();
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shader_version_markerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionMarker300ES() { return GetToken(GLSL_ES300Parser.VersionMarker300ES, 0); }
		public Shader_version_markerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader_version_marker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterShader_version_marker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitShader_version_marker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader_version_marker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shader_version_markerContext shader_version_marker() {
		Shader_version_markerContext _localctx = new Shader_version_markerContext(Context, State);
		EnterRule(_localctx, 4, RULE_shader_version_marker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(VersionMarker300ES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public External_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterExternal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitExternal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_declarationContext external_declaration() {
		External_declarationContext _localctx = new External_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_external_declaration);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				function_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_prototypeContext function_prototype() {
			return GetRuleContext<Function_prototypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_function_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			function_prototype();
			State = 177;
			compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_prototypeContext function_prototype() {
			return GetRuleContext<Function_prototypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(GLSL_ES300Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorlistContext declaratorlist() {
			return GetRuleContext<DeclaratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Precision() { return GetToken(GLSL_ES300Parser.Precision, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Precision_qualifierContext precision_qualifier() {
			return GetRuleContext<Precision_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifier_noprecContext type_specifier_noprec() {
			return GetRuleContext<Type_specifier_noprecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_qualifierContext type_qualifier() {
			return GetRuleContext<Type_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(GLSL_ES300Parser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(GLSL_ES300Parser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(GLSL_ES300Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarationlistContext struct_declarationlist() {
			return GetRuleContext<Struct_declarationlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(GLSL_ES300Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(GLSL_ES300Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(GLSL_ES300Parser.RightBracket, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		int _la;
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				function_prototype();
				State = 180;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				declaratorlist(0);
				State = 183;
				Match(Semicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				Match(Precision);
				State = 186;
				precision_qualifier();
				State = 187;
				type_specifier_noprec();
				State = 188;
				Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 190;
				type_qualifier();
				State = 191;
				Match(Identifier);
				State = 192;
				Match(LeftBrace);
				State = 193;
				struct_declarationlist();
				State = 194;
				Match(RightBrace);
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 195;
					Match(Identifier);
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBracket) {
						{
						State = 196;
						Match(LeftBracket);
						State = 197;
						constant_expression();
						State = 198;
						Match(RightBracket);
						}
					}

					}
				}

				State = 204;
				Match(Semicolon);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 206;
				type_qualifier();
				State = 207;
				Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fully_specified_typeContext fully_specified_type() {
			return GetRuleContext<Fully_specified_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(GLSL_ES300Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(GLSL_ES300Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GLSL_ES300Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Invariant() { return GetToken(GLSL_ES300Parser.Invariant, 0); }
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 12, RULE_declarator);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211;
				fully_specified_type();
				State = 213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 212;
					Match(Identifier);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				fully_specified_type();
				State = 216;
				Match(Identifier);
				State = 217;
				Match(LeftBracket);
				State = 218;
				constant_expression();
				State = 219;
				Match(RightBracket);
				State = 222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 220;
					Match(Assign);
					State = 221;
					initializer();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 224;
				fully_specified_type();
				State = 225;
				Match(Identifier);
				State = 226;
				Match(LeftBracket);
				State = 227;
				Match(RightBracket);
				State = 228;
				Match(Assign);
				State = 229;
				initializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 231;
				fully_specified_type();
				State = 232;
				Match(Identifier);
				State = 233;
				Match(Assign);
				State = 234;
				initializer();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236;
				Match(Invariant);
				State = 237;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorlistContext declaratorlist() {
			return GetRuleContext<DeclaratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(GLSL_ES300Parser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(GLSL_ES300Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(GLSL_ES300Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GLSL_ES300Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public DeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterDeclaratorlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitDeclaratorlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaratorlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorlistContext declaratorlist() {
		return declaratorlist(0);
	}

	private DeclaratorlistContext declaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclaratorlistContext _localctx = new DeclaratorlistContext(Context, _parentState);
		DeclaratorlistContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_declaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 241;
			declarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 268;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new DeclaratorlistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_declaratorlist);
						State = 243;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 244;
						Match(Comma);
						State = 245;
						Match(Identifier);
						}
						break;
					case 2:
						{
						_localctx = new DeclaratorlistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_declaratorlist);
						State = 246;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 247;
						Match(Comma);
						State = 248;
						Match(Identifier);
						State = 249;
						Match(LeftBracket);
						State = 250;
						constant_expression();
						State = 251;
						Match(RightBracket);
						State = 254;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
						case 1:
							{
							State = 252;
							Match(Assign);
							State = 253;
							initializer();
							}
							break;
						}
						}
						break;
					case 3:
						{
						_localctx = new DeclaratorlistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_declaratorlist);
						State = 256;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 257;
						Match(Comma);
						State = 258;
						Match(Identifier);
						State = 259;
						Match(LeftBracket);
						State = 260;
						Match(RightBracket);
						State = 261;
						Match(Assign);
						State = 262;
						initializer();
						}
						break;
					case 4:
						{
						_localctx = new DeclaratorlistContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_declaratorlist);
						State = 263;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 264;
						Match(Comma);
						State = 265;
						Match(Identifier);
						State = 266;
						Match(Assign);
						State = 267;
						initializer();
						}
						break;
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 16, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignment_expression);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				conditional_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				unary_expression();
				State = 277;
				assignment_operator();
				State = 278;
				assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mul() { return GetToken(GLSL_ES300Parser.Mul, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(GLSL_ES300Parser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percent() { return GetToken(GLSL_ES300Parser.Percent, 0); }
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		return multiplicative_expression(0);
	}

	private Multiplicative_expressionContext multiplicative_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, _parentState);
		Multiplicative_expressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_multiplicative_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 283;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
					State = 285;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 286;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12094627905536L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 287;
					unary_expression();
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(GLSL_ES300Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(GLSL_ES300Parser.Minus, 0); }
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		return additive_expression(0);
	}

	private Additive_expressionContext additive_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, _parentState);
		Additive_expressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_additive_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 294;
			multiplicative_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 301;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Additive_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
					State = 296;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 297;
					_la = TokenStream.LA(1);
					if ( !(_la==Plus || _la==Minus) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 298;
					multiplicative_expression(0);
					}
					} 
				}
				State = 303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Left() { return GetToken(GLSL_ES300Parser.Left, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Right() { return GetToken(GLSL_ES300Parser.Right, 0); }
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		return shift_expression(0);
	}

	private Shift_expressionContext shift_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, _parentState);
		Shift_expressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_shift_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 305;
			additive_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 312;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Shift_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
					State = 307;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 308;
					_la = TokenStream.LA(1);
					if ( !(_la==Left || _la==Right) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 309;
					additive_expression(0);
					}
					} 
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(GLSL_ES300Parser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(GLSL_ES300Parser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessOrEqual() { return GetToken(GLSL_ES300Parser.LessOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOrEqual() { return GetToken(GLSL_ES300Parser.GreaterOrEqual, 0); }
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_relational_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 316;
			shift_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 323;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					State = 318;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 319;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16888498602639360L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 320;
					shift_expression(0);
					}
					} 
				}
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(GLSL_ES300Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(GLSL_ES300Parser.NotEqual, 0); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		return equality_expression(0);
	}

	private Equality_expressionContext equality_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, _parentState);
		Equality_expressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_equality_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 327;
			relational_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Equality_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
					State = 329;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 330;
					_la = TokenStream.LA(1);
					if ( !(_la==NotEqual || _la==Equal) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 331;
					relational_expression(0);
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(GLSL_ES300Parser.Ampersand, 0); }
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		return and_expression(0);
	}

	private And_expressionContext and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		And_expressionContext _localctx = new And_expressionContext(Context, _parentState);
		And_expressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 338;
			equality_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new And_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_and_expression);
					State = 340;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 341;
					Match(Ampersand);
					State = 342;
					equality_expression(0);
					}
					} 
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(GLSL_ES300Parser.Caret, 0); }
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		return exclusive_or_expression(0);
	}

	private Exclusive_or_expressionContext exclusive_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, _parentState);
		Exclusive_or_expressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_exclusive_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 349;
			and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 356;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Exclusive_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusive_or_expression);
					State = 351;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 352;
					Match(Caret);
					State = 353;
					and_expression(0);
					}
					} 
				}
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe() { return GetToken(GLSL_ES300Parser.Pipe, 0); }
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		return inclusive_or_expression(0);
	}

	private Inclusive_or_expressionContext inclusive_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, _parentState);
		Inclusive_or_expressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_inclusive_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 360;
			exclusive_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Inclusive_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusive_or_expression);
					State = 362;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 363;
					Match(Pipe);
					State = 364;
					exclusive_or_expression(0);
					}
					} 
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_and_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_and_expressionContext logical_and_expression() {
			return GetRuleContext<Logical_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(GLSL_ES300Parser.And, 0); }
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_and_expressionContext logical_and_expression() {
		return logical_and_expression(0);
	}

	private Logical_and_expressionContext logical_and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(Context, _parentState);
		Logical_and_expressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_logical_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 371;
			inclusive_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 378;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_and_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_and_expression);
					State = 373;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 374;
					Match(And);
					State = 375;
					inclusive_or_expression(0);
					}
					} 
				}
				State = 380;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_xor_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_and_expressionContext logical_and_expression() {
			return GetRuleContext<Logical_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_xor_expressionContext logical_xor_expression() {
			return GetRuleContext<Logical_xor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Xor() { return GetToken(GLSL_ES300Parser.Xor, 0); }
		public Logical_xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_xor_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterLogical_xor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitLogical_xor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_xor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_xor_expressionContext logical_xor_expression() {
		return logical_xor_expression(0);
	}

	private Logical_xor_expressionContext logical_xor_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_xor_expressionContext _localctx = new Logical_xor_expressionContext(Context, _parentState);
		Logical_xor_expressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_logical_xor_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 382;
			logical_and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 389;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_xor_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_xor_expression);
					State = 384;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 385;
					Match(Xor);
					State = 386;
					logical_and_expression(0);
					}
					} 
				}
				State = 391;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_xor_expressionContext logical_xor_expression() {
			return GetRuleContext<Logical_xor_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_or_expressionContext logical_or_expression() {
			return GetRuleContext<Logical_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(GLSL_ES300Parser.Or, 0); }
		public Logical_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_or_expressionContext logical_or_expression() {
		return logical_or_expression(0);
	}

	private Logical_or_expressionContext logical_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_or_expressionContext _localctx = new Logical_or_expressionContext(Context, _parentState);
		Logical_or_expressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_logical_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 393;
			logical_xor_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 400;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_or_expression);
					State = 395;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 396;
					Match(Or);
					State = 397;
					logical_xor_expression(0);
					}
					} 
				}
				State = 402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_or_expressionContext logical_or_expression() {
			return GetRuleContext<Logical_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(GLSL_ES300Parser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GLSL_ES300Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditional_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			logical_or_expression(0);
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 404;
				Match(Question);
				State = 405;
				expression(0);
				State = 406;
				Match(Colon);
				State = 407;
				assignment_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment() { return GetToken(GLSL_ES300Parser.Increment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement() { return GetToken(GLSL_ES300Parser.Decrement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_unary_expression);
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FloatingLiteral:
			case IntegerLiteral:
			case BoolLiteral:
			case Struct:
			case PrecisionLow:
			case PrecisionMedium:
			case PrecisionHigh:
			case LeftParen:
			case Void_type:
			case Bool_type:
			case Int_type:
			case Uint_type:
			case Float_type:
			case Vec2_type:
			case Vec3_type:
			case Vec4_type:
			case Bvec2_type:
			case Bvec3_type:
			case Bvec4_type:
			case Ivec2_type:
			case Ivec3_type:
			case Ivec4_type:
			case Uvec2_type:
			case Uvec3_type:
			case Uvec4_type:
			case Mat2_type:
			case Mat3_type:
			case Mat4_type:
			case Mat2x2_type:
			case Mat2x3_type:
			case Mat2x4_type:
			case Mat3x2_type:
			case Mat3x3_type:
			case Mat3x4_type:
			case Mat4x2_type:
			case Mat4x3_type:
			case Mat4x4_type:
			case Sampler2D_type:
			case Sampler3D_type:
			case SamplerCube_type:
			case SamplerCubeShadow_type:
			case Sampler2DShadow_type:
			case Sampler2DArray_type:
			case Sampler2DArrayShadow_type:
			case Isampler2D_type:
			case Isampler3D_type:
			case IsamplerCube_type:
			case Isampler2DArray_type:
			case Usampler2D_type:
			case Usampler3D_type:
			case UsamplerCube_type:
			case Usampler2DArray_type:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411;
				postfix_expression(0);
				}
				break;
			case Increment:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				Match(Increment);
				State = 413;
				unary_expression();
				}
				break;
			case Decrement:
				EnterOuterAlt(_localctx, 3);
				{
				State = 414;
				Match(Decrement);
				State = 415;
				unary_expression();
				}
				break;
			case Plus:
			case Minus:
			case Bang:
			case Tilde:
				EnterOuterAlt(_localctx, 4);
				{
				State = 416;
				unary_operator();
				State = 417;
				unary_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_selectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		public Field_selectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_selection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterField_selection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitField_selection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_selection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_selectionContext field_selection() {
		Field_selectionContext _localctx = new Field_selectionContext(Context, State);
		EnterRule(_localctx, 46, RULE_field_selection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_genericContext function_call_generic() {
			return GetRuleContext<Function_call_genericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(GLSL_ES300Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_expressionContext integer_expression() {
			return GetRuleContext<Integer_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(GLSL_ES300Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(GLSL_ES300Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_selectionContext field_selection() {
			return GetRuleContext<Field_selectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment() { return GetToken(GLSL_ES300Parser.Increment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement() { return GetToken(GLSL_ES300Parser.Decrement, 0); }
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterPostfix_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitPostfix_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		return postfix_expression(0);
	}

	private Postfix_expressionContext postfix_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, _parentState);
		Postfix_expressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_postfix_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 424;
				primary_expression();
				}
				break;
			case 2:
				{
				State = 425;
				function_call_generic();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 443;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 428;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 429;
						Match(LeftBracket);
						State = 430;
						integer_expression();
						State = 431;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 433;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 434;
						Match(Dot);
						State = 435;
						function_call_generic();
						}
						break;
					case 3:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 436;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 437;
						Match(Dot);
						State = 438;
						field_selection();
						}
						break;
					case 4:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 439;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 440;
						Match(Increment);
						}
						break;
					case 5:
						{
						_localctx = new Postfix_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 441;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 442;
						Match(Decrement);
						}
						break;
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_call_genericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_header_with_parametersContext function_call_header_with_parameters() {
			return GetRuleContext<Function_call_header_with_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(GLSL_ES300Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_header_no_parametersContext function_call_header_no_parameters() {
			return GetRuleContext<Function_call_header_no_parametersContext>(0);
		}
		public Function_call_genericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_generic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_call_generic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_call_generic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_generic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_genericContext function_call_generic() {
		Function_call_genericContext _localctx = new Function_call_genericContext(Context, State);
		EnterRule(_localctx, 50, RULE_function_call_generic);
		try {
			State = 454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 448;
				function_call_header_with_parameters(0);
				State = 449;
				Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451;
				function_call_header_no_parameters();
				State = 452;
				Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_header_no_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_headerContext function_call_header() {
			return GetRuleContext<Function_call_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void_type() { return GetToken(GLSL_ES300Parser.Void_type, 0); }
		public Function_call_header_no_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_header_no_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_call_header_no_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_call_header_no_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_header_no_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_header_no_parametersContext function_call_header_no_parameters() {
		Function_call_header_no_parametersContext _localctx = new Function_call_header_no_parametersContext(Context, State);
		EnterRule(_localctx, 52, RULE_function_call_header_no_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			function_call_header();
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Void_type) {
				{
				State = 457;
				Match(Void_type);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_header_with_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_headerContext function_call_header() {
			return GetRuleContext<Function_call_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_header_with_parametersContext function_call_header_with_parameters() {
			return GetRuleContext<Function_call_header_with_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(GLSL_ES300Parser.Comma, 0); }
		public Function_call_header_with_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_header_with_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_call_header_with_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_call_header_with_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_header_with_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_header_with_parametersContext function_call_header_with_parameters() {
		return function_call_header_with_parameters(0);
	}

	private Function_call_header_with_parametersContext function_call_header_with_parameters(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Function_call_header_with_parametersContext _localctx = new Function_call_header_with_parametersContext(Context, _parentState);
		Function_call_header_with_parametersContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_function_call_header_with_parameters, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 461;
			function_call_header();
			State = 462;
			assignment_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 469;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Function_call_header_with_parametersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_function_call_header_with_parameters);
					State = 464;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 465;
					Match(Comma);
					State = 466;
					assignment_expression();
					}
					} 
				}
				State = 471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_call_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_identifierContext function_identifier() {
			return GetRuleContext<Function_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(GLSL_ES300Parser.LeftParen, 0); }
		public Function_call_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_call_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_call_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_headerContext function_call_header() {
		Function_call_headerContext _localctx = new Function_call_headerContext(Context, State);
		EnterRule(_localctx, 56, RULE_function_call_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			function_identifier();
			State = 473;
			Match(LeftParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_selectionContext field_selection() {
			return GetRuleContext<Field_selectionContext>(0);
		}
		public Function_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_identifierContext function_identifier() {
		Function_identifierContext _localctx = new Function_identifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_function_identifier);
		try {
			State = 478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				type_specifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				field_selection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		public Variable_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterVariable_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitVariable_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_identifierContext variable_identifier() {
		Variable_identifierContext _localctx = new Variable_identifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_variable_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Integer_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterInteger_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitInteger_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integer_expressionContext integer_expression() {
		Integer_expressionContext _localctx = new Integer_expressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_integer_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(GLSL_ES300Parser.Comma, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 485;
			assignment_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 492;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 487;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 488;
					Match(Comma);
					State = 489;
					assignment_expression();
					}
					} 
				}
				State = 494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_identifierContext variable_identifier() {
			return GetRuleContext<Variable_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(GLSL_ES300Parser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingLiteral() { return GetToken(GLSL_ES300Parser.FloatingLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(GLSL_ES300Parser.BoolLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(GLSL_ES300Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(GLSL_ES300Parser.RightParen, 0); }
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_primary_expression);
		try {
			State = 503;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 495;
				variable_identifier();
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 496;
				Match(IntegerLiteral);
				}
				break;
			case FloatingLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 497;
				Match(FloatingLiteral);
				}
				break;
			case BoolLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 498;
				Match(BoolLiteral);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 5);
				{
				State = 499;
				Match(LeftParen);
				State = 500;
				expression(0);
				State = 501;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_prototypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_declaratorContext function_declarator() {
			return GetRuleContext<Function_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(GLSL_ES300Parser.RightParen, 0); }
		public Function_prototypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_prototype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_prototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_prototype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_prototype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_prototypeContext function_prototype() {
		Function_prototypeContext _localctx = new Function_prototypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_function_prototype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			function_declarator();
			State = 506;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headerContext function_header() {
			return GetRuleContext<Function_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		public Function_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declaratorContext function_declarator() {
		Function_declaratorContext _localctx = new Function_declaratorContext(Context, State);
		EnterRule(_localctx, 70, RULE_function_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			function_header();
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7936L) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52776558133247L) != 0)) {
				{
				State = 509;
				function_parameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fully_specified_typeContext fully_specified_type() {
			return GetRuleContext<Fully_specified_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(GLSL_ES300Parser.LeftParen, 0); }
		public Function_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_headerContext function_header() {
		Function_headerContext _localctx = new Function_headerContext(Context, State);
		EnterRule(_localctx, 72, RULE_function_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			fully_specified_type();
			State = 513;
			Match(Identifier);
			State = 514;
			Match(LeftParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declarationContext[] parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(GLSL_ES300Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(GLSL_ES300Parser.Comma, i);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parametersContext function_parameters() {
		Function_parametersContext _localctx = new Function_parametersContext(Context, State);
		EnterRule(_localctx, 74, RULE_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			parameter_declaration();
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 517;
				Match(Comma);
				State = 518;
				parameter_declaration();
				}
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declaratorContext parameter_declarator() {
			return GetRuleContext<Parameter_declaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_type_qualifierContext parameter_type_qualifier() {
			return GetRuleContext<Parameter_type_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_qualifierContext parameter_qualifier() {
			return GetRuleContext<Parameter_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifier_nonarrayContext type_specifier_nonarray() {
			return GetRuleContext<Type_specifier_nonarrayContext>(0);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterParameter_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitParameter_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_parameter_declaration);
		int _la;
		try {
			State = 538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 524;
					parameter_type_qualifier();
					}
				}

				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7168L) != 0)) {
					{
					State = 527;
					parameter_qualifier();
					}
				}

				State = 530;
				parameter_declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 531;
					parameter_type_qualifier();
					}
				}

				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7168L) != 0)) {
					{
					State = 534;
					parameter_qualifier();
					}
				}

				State = 537;
				type_specifier_nonarray();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifier_nonarrayContext type_specifier_nonarray() {
			return GetRuleContext<Type_specifier_nonarrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(GLSL_ES300Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(GLSL_ES300Parser.RightBracket, 0); }
		public Parameter_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterParameter_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitParameter_declarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declaratorContext parameter_declarator() {
		Parameter_declaratorContext _localctx = new Parameter_declaratorContext(Context, State);
		EnterRule(_localctx, 78, RULE_parameter_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			type_specifier_nonarray();
			State = 541;
			Match(Identifier);
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket) {
				{
				State = 542;
				Match(LeftBracket);
				State = 543;
				constant_expression();
				State = 544;
				Match(RightBracket);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precision_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrecisionLow() { return GetToken(GLSL_ES300Parser.PrecisionLow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrecisionMedium() { return GetToken(GLSL_ES300Parser.PrecisionMedium, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrecisionHigh() { return GetToken(GLSL_ES300Parser.PrecisionHigh, 0); }
		public Precision_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterPrecision_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitPrecision_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precision_qualifierContext precision_qualifier() {
		Precision_qualifierContext _localctx = new Precision_qualifierContext(Context, State);
		EnterRule(_localctx, 80, RULE_precision_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(GLSL_ES300Parser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Out() { return GetToken(GLSL_ES300Parser.Out, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InOut() { return GetToken(GLSL_ES300Parser.InOut, 0); }
		public Parameter_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterParameter_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitParameter_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_qualifierContext parameter_qualifier() {
		Parameter_qualifierContext _localctx = new Parameter_qualifierContext(Context, State);
		EnterRule(_localctx, 82, RULE_parameter_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7168L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_type_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(GLSL_ES300Parser.Const, 0); }
		public Parameter_type_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_type_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterParameter_type_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitParameter_type_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_type_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_type_qualifierContext parameter_type_qualifier() {
		Parameter_type_qualifierContext _localctx = new Parameter_type_qualifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_parameter_type_qualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(GLSL_ES300Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(GLSL_ES300Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(Context, State);
		EnterRule(_localctx, 86, RULE_compound_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(LeftBrace);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53876058222350L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 432345564227559751L) != 0)) {
				{
				State = 555;
				statementlist(0);
				}
			}

			State = 558;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public StatementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterStatementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitStatementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementlistContext statementlist() {
		return statementlist(0);
	}

	private StatementlistContext statementlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementlistContext _localctx = new StatementlistContext(Context, _parentState);
		StatementlistContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_statementlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 561;
			statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 567;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statementlist);
					State = 563;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 564;
					statement();
					}
					} 
				}
				State = 569;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_statementContext simple_statement() {
			return GetRuleContext<Simple_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_statement);
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570;
				compound_statement();
				}
				break;
			case FloatingLiteral:
			case IntegerLiteral:
			case BoolLiteral:
			case Struct:
			case Const:
			case In:
			case Out:
			case Uniform:
			case CentroidIn:
			case CentroidOut:
			case Precision:
			case PrecisionLow:
			case PrecisionMedium:
			case PrecisionHigh:
			case If:
			case Switch:
			case Case:
			case Default:
			case While:
			case Do:
			case For:
			case Continue:
			case Break:
			case Return:
			case Discard:
			case Invariant:
			case Layout:
			case Smooth:
			case Flat:
			case Plus:
			case Minus:
			case Bang:
			case Tilde:
			case Increment:
			case Decrement:
			case Semicolon:
			case LeftParen:
			case Void_type:
			case Bool_type:
			case Int_type:
			case Uint_type:
			case Float_type:
			case Vec2_type:
			case Vec3_type:
			case Vec4_type:
			case Bvec2_type:
			case Bvec3_type:
			case Bvec4_type:
			case Ivec2_type:
			case Ivec3_type:
			case Ivec4_type:
			case Uvec2_type:
			case Uvec3_type:
			case Uvec4_type:
			case Mat2_type:
			case Mat3_type:
			case Mat4_type:
			case Mat2x2_type:
			case Mat2x3_type:
			case Mat2x4_type:
			case Mat3x2_type:
			case Mat3x3_type:
			case Mat3x4_type:
			case Mat4x2_type:
			case Mat4x3_type:
			case Mat4x4_type:
			case Sampler2D_type:
			case Sampler3D_type:
			case SamplerCube_type:
			case SamplerCubeShadow_type:
			case Sampler2DShadow_type:
			case Sampler2DArray_type:
			case Sampler2DArrayShadow_type:
			case Isampler2D_type:
			case Isampler3D_type:
			case IsamplerCube_type:
			case Isampler2DArray_type:
			case Usampler2D_type:
			case Usampler3D_type:
			case UsamplerCube_type:
			case Usampler2DArray_type:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571;
				simple_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_labelContext case_label() {
			return GetRuleContext<Case_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public Simple_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterSimple_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitSimple_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_statementContext simple_statement() {
		Simple_statementContext _localctx = new Simple_statementContext(Context, State);
		EnterRule(_localctx, 92, RULE_simple_statement);
		try {
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 574;
				declaration_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575;
				expression_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 576;
				selection_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 577;
				switch_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 578;
				case_label();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 579;
				iteration_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 580;
				jump_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(GLSL_ES300Parser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(GLSL_ES300Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(GLSL_ES300Parser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(GLSL_ES300Parser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Discard() { return GetToken(GLSL_ES300Parser.Discard, 0); }
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterJump_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitJump_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 94, RULE_jump_statement);
		int _la;
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Continue:
				EnterOuterAlt(_localctx, 1);
				{
				State = 583;
				Match(Continue);
				State = 584;
				Match(Semicolon);
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 2);
				{
				State = 585;
				Match(Break);
				State = 586;
				Match(Semicolon);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 3);
				{
				State = 587;
				Match(Return);
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53601192771854L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 432345564227559683L) != 0)) {
					{
					State = 588;
					expression(0);
					}
				}

				State = 591;
				Match(Semicolon);
				}
				break;
			case Discard:
				EnterOuterAlt(_localctx, 4);
				{
				State = 592;
				Match(Discard);
				State = 593;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fully_specified_typeContext fully_specified_type() {
			return GetRuleContext<Fully_specified_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GLSL_ES300Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 96, RULE_condition);
		try {
			State = 602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 596;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 597;
				fully_specified_type();
				State = 598;
				Match(Identifier);
				State = 599;
				Match(Assign);
				State = 600;
				initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(GLSL_ES300Parser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(GLSL_ES300Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(GLSL_ES300Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(GLSL_ES300Parser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(GLSL_ES300Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(GLSL_ES300Parser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_init_statementContext for_init_statement() {
			return GetRuleContext<For_init_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_rest_statementContext for_rest_statement() {
			return GetRuleContext<For_rest_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 98, RULE_iteration_statement);
		try {
			State = 625;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 604;
				Match(While);
				State = 605;
				Match(LeftParen);
				State = 606;
				condition();
				State = 607;
				Match(RightParen);
				State = 608;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610;
				Match(Do);
				State = 611;
				statement();
				State = 612;
				Match(While);
				State = 613;
				Match(LeftParen);
				State = 614;
				expression(0);
				State = 615;
				Match(RightParen);
				State = 616;
				Match(Semicolon);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 618;
				Match(For);
				State = 619;
				Match(LeftParen);
				State = 620;
				for_init_statement();
				State = 621;
				for_rest_statement();
				State = 622;
				Match(RightParen);
				State = 623;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_init_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		public For_init_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_init_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFor_init_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFor_init_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_init_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_init_statementContext for_init_statement() {
		For_init_statementContext _localctx = new For_init_statementContext(Context, State);
		EnterRule(_localctx, 100, RULE_for_init_statement);
		try {
			State = 629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627;
				expression_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628;
				declaration_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_rest_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(GLSL_ES300Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_rest_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_rest_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFor_rest_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFor_rest_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_rest_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_rest_statementContext for_rest_statement() {
		For_rest_statementContext _localctx = new For_rest_statementContext(Context, State);
		EnterRule(_localctx, 102, RULE_for_rest_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53858890870542L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 432345564227559683L) != 0)) {
				{
				State = 631;
				condition();
				}
			}

			State = 634;
			Match(Semicolon);
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53601192771854L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 432345564227559683L) != 0)) {
				{
				State = 635;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(GLSL_ES300Parser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(GLSL_ES300Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(GLSL_ES300Parser.Default, 0); }
		public Case_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterCase_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitCase_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_labelContext case_label() {
		Case_labelContext _localctx = new Case_labelContext(Context, State);
		EnterRule(_localctx, 104, RULE_case_label);
		try {
			State = 644;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 638;
				Match(Case);
				State = 639;
				expression(0);
				State = 640;
				Match(Colon);
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 642;
				Match(Default);
				State = 643;
				Match(Colon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(GLSL_ES300Parser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(GLSL_ES300Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(GLSL_ES300Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(GLSL_ES300Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(GLSL_ES300Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 106, RULE_switch_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(Switch);
			State = 647;
			Match(LeftParen);
			State = 648;
			expression(0);
			State = 649;
			Match(RightParen);
			State = 650;
			Match(LeftBrace);
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53876058222350L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 432345564227559751L) != 0)) {
				{
				State = 651;
				statementlist(0);
				}
			}

			State = 654;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(GLSL_ES300Parser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(GLSL_ES300Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(GLSL_ES300Parser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(GLSL_ES300Parser.Else, 0); }
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(Context, State);
		EnterRule(_localctx, 108, RULE_selection_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(If);
			State = 657;
			Match(LeftParen);
			State = 658;
			expression(0);
			State = 659;
			Match(RightParen);
			State = 660;
			statement();
			State = 663;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 661;
				Match(Else);
				State = 662;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(GLSL_ES300Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 110, RULE_expression_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53601192771854L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 432345564227559683L) != 0)) {
				{
				State = 665;
				expression(0);
				}
			}

			State = 668;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterDeclaration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitDeclaration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(Context, State);
		EnterRule(_localctx, 112, RULE_declaration_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_constant_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			conditional_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fully_specified_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifier_nonarrayContext type_specifier_nonarray() {
			return GetRuleContext<Type_specifier_nonarrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_qualifierContext type_qualifier() {
			return GetRuleContext<Type_qualifierContext>(0);
		}
		public Fully_specified_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fully_specified_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterFully_specified_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitFully_specified_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFully_specified_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fully_specified_typeContext fully_specified_type() {
		Fully_specified_typeContext _localctx = new Fully_specified_typeContext(Context, State);
		EnterRule(_localctx, 116, RULE_fully_specified_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 257698098688L) != 0)) {
				{
				State = 674;
				type_qualifier();
				}
			}

			State = 677;
			type_specifier_nonarray();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(GLSL_ES300Parser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingLiteral() { return GetToken(GLSL_ES300Parser.FloatingLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 118, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			_la = TokenStream.LA(1);
			if ( !(_la==FloatingLiteral || _la==IntegerLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declaratorlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaratorlistContext struct_declaratorlist() {
			return GetRuleContext<Struct_declaratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(GLSL_ES300Parser.Comma, 0); }
		public Struct_declaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaratorlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterStruct_declaratorlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitStruct_declaratorlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declaratorlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declaratorlistContext struct_declaratorlist() {
		return struct_declaratorlist(0);
	}

	private Struct_declaratorlistContext struct_declaratorlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Struct_declaratorlistContext _localctx = new Struct_declaratorlistContext(Context, _parentState);
		Struct_declaratorlistContext _prevctx = _localctx;
		int _startState = 120;
		EnterRecursionRule(_localctx, 120, RULE_struct_declaratorlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 682;
			Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 689;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Struct_declaratorlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_struct_declaratorlist);
					State = 684;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 685;
					Match(Comma);
					State = 686;
					Match(Identifier);
					}
					} 
				}
				State = 691;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Struct_declarationlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarationContext[] struct_declaration() {
			return GetRuleContexts<Struct_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarationContext struct_declaration(int i) {
			return GetRuleContext<Struct_declarationContext>(i);
		}
		public Struct_declarationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declarationlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterStruct_declarationlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitStruct_declarationlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declarationlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationlistContext struct_declarationlist() {
		Struct_declarationlistContext _localctx = new Struct_declarationlistContext(Context, State);
		EnterRule(_localctx, 122, RULE_struct_declarationlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 692;
				struct_declaration();
				}
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 257699016448L) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & 52776558133247L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declaratorlistContext struct_declaratorlist() {
			return GetRuleContext<Struct_declaratorlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(GLSL_ES300Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_qualifierContext type_qualifier() {
			return GetRuleContext<Type_qualifierContext>(0);
		}
		public Struct_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterStruct_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitStruct_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationContext struct_declaration() {
		Struct_declarationContext _localctx = new Struct_declarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_struct_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 257698098688L) != 0)) {
				{
				State = 697;
				type_qualifier();
				}
			}

			State = 700;
			type_specifier();
			State = 701;
			struct_declaratorlist(0);
			State = 702;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(GLSL_ES300Parser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(GLSL_ES300Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarationlistContext struct_declarationlist() {
			return GetRuleContext<Struct_declarationlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(GLSL_ES300Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		public Struct_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterStruct_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitStruct_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_specifierContext struct_specifier() {
		Struct_specifierContext _localctx = new Struct_specifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_struct_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			Match(Struct);
			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 705;
				Match(Identifier);
				}
			}

			State = 708;
			Match(LeftBrace);
			State = 709;
			struct_declarationlist();
			State = 710;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Storage_qualifierContext storage_qualifier() {
			return GetRuleContext<Storage_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Layout_qualifierContext layout_qualifier() {
			return GetRuleContext<Layout_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interpolation_qualifierContext interpolation_qualifier() {
			return GetRuleContext<Interpolation_qualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Invariant_qualifierContext invariant_qualifier() {
			return GetRuleContext<Invariant_qualifierContext>(0);
		}
		public Type_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterType_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitType_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_qualifierContext type_qualifier() {
		Type_qualifierContext _localctx = new Type_qualifierContext(Context, State);
		EnterRule(_localctx, 128, RULE_type_qualifier);
		try {
			State = 725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712;
				storage_qualifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 713;
				layout_qualifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 714;
				layout_qualifier();
				State = 715;
				storage_qualifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 717;
				interpolation_qualifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 718;
				invariant_qualifier();
				State = 719;
				storage_qualifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 721;
				invariant_qualifier();
				State = 722;
				interpolation_qualifier();
				State = 723;
				storage_qualifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolation_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smooth() { return GetToken(GLSL_ES300Parser.Smooth, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Flat() { return GetToken(GLSL_ES300Parser.Flat, 0); }
		public Interpolation_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolation_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterInterpolation_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitInterpolation_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolation_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolation_qualifierContext interpolation_qualifier() {
		Interpolation_qualifierContext _localctx = new Interpolation_qualifierContext(Context, State);
		EnterRule(_localctx, 130, RULE_interpolation_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			_la = TokenStream.LA(1);
			if ( !(_la==Smooth || _la==Flat) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Layout_qualifier_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GLSL_ES300Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(GLSL_ES300Parser.IntegerLiteral, 0); }
		public Layout_qualifier_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_layout_qualifier_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterLayout_qualifier_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitLayout_qualifier_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLayout_qualifier_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Layout_qualifier_idContext layout_qualifier_id() {
		Layout_qualifier_idContext _localctx = new Layout_qualifier_idContext(Context, State);
		EnterRule(_localctx, 132, RULE_layout_qualifier_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			Match(Identifier);
			State = 732;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 730;
				Match(Assign);
				State = 731;
				Match(IntegerLiteral);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Layout_qualifier_idlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Layout_qualifier_idContext layout_qualifier_id() {
			return GetRuleContext<Layout_qualifier_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Layout_qualifier_idlistContext layout_qualifier_idlist() {
			return GetRuleContext<Layout_qualifier_idlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(GLSL_ES300Parser.Comma, 0); }
		public Layout_qualifier_idlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_layout_qualifier_idlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterLayout_qualifier_idlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitLayout_qualifier_idlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLayout_qualifier_idlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Layout_qualifier_idlistContext layout_qualifier_idlist() {
		return layout_qualifier_idlist(0);
	}

	private Layout_qualifier_idlistContext layout_qualifier_idlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Layout_qualifier_idlistContext _localctx = new Layout_qualifier_idlistContext(Context, _parentState);
		Layout_qualifier_idlistContext _prevctx = _localctx;
		int _startState = 134;
		EnterRecursionRule(_localctx, 134, RULE_layout_qualifier_idlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 735;
			layout_qualifier_id();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 742;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Layout_qualifier_idlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_layout_qualifier_idlist);
					State = 737;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 738;
					Match(Comma);
					State = 739;
					layout_qualifier_id();
					}
					} 
				}
				State = 744;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Layout_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Layout() { return GetToken(GLSL_ES300Parser.Layout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(GLSL_ES300Parser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Layout_qualifier_idlistContext layout_qualifier_idlist() {
			return GetRuleContext<Layout_qualifier_idlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(GLSL_ES300Parser.RightParen, 0); }
		public Layout_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_layout_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterLayout_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitLayout_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLayout_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Layout_qualifierContext layout_qualifier() {
		Layout_qualifierContext _localctx = new Layout_qualifierContext(Context, State);
		EnterRule(_localctx, 136, RULE_layout_qualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(Layout);
			State = 746;
			Match(LeftParen);
			State = 747;
			layout_qualifier_idlist(0);
			State = 748;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invariant_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Invariant() { return GetToken(GLSL_ES300Parser.Invariant, 0); }
		public Invariant_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invariant_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterInvariant_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitInvariant_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvariant_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Invariant_qualifierContext invariant_qualifier() {
		Invariant_qualifierContext _localctx = new Invariant_qualifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_invariant_qualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			Match(Invariant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Storage_qualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(GLSL_ES300Parser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(GLSL_ES300Parser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Out() { return GetToken(GLSL_ES300Parser.Out, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uniform() { return GetToken(GLSL_ES300Parser.Uniform, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CentroidIn() { return GetToken(GLSL_ES300Parser.CentroidIn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CentroidOut() { return GetToken(GLSL_ES300Parser.CentroidOut, 0); }
		public Storage_qualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storage_qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterStorage_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitStorage_qualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorage_qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Storage_qualifierContext storage_qualifier() {
		Storage_qualifierContext _localctx = new Storage_qualifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_storage_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 752;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60928L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(GLSL_ES300Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(GLSL_ES300Parser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(GLSL_ES300Parser.Bang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(GLSL_ES300Parser.Tilde, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 142, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 53601191854080L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(GLSL_ES300Parser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MulAssign() { return GetToken(GLSL_ES300Parser.MulAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(GLSL_ES300Parser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(GLSL_ES300Parser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AddAssign() { return GetToken(GLSL_ES300Parser.AddAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubAssign() { return GetToken(GLSL_ES300Parser.SubAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftAssign() { return GetToken(GLSL_ES300Parser.LeftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightAssign() { return GetToken(GLSL_ES300Parser.RightAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(GLSL_ES300Parser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(GLSL_ES300Parser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(GLSL_ES300Parser.OrAssign, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 144, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 16760833L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifier_noprecContext type_specifier_noprec() {
			return GetRuleContext<Type_specifier_noprecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precision_qualifierContext precision_qualifier() {
			return GetRuleContext<Precision_qualifierContext>(0);
		}
		public Type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterType_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitType_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifierContext type_specifier() {
		Type_specifierContext _localctx = new Type_specifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_type_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) {
				{
				State = 758;
				precision_qualifier();
				}
			}

			State = 761;
			type_specifier_noprec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifier_noprecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specifier_nonarrayContext type_specifier_nonarray() {
			return GetRuleContext<Type_specifier_nonarrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(GLSL_ES300Parser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(GLSL_ES300Parser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Type_specifier_noprecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier_noprec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterType_specifier_noprec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitType_specifier_noprec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_specifier_noprec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifier_noprecContext type_specifier_noprec() {
		Type_specifier_noprecContext _localctx = new Type_specifier_noprecContext(Context, State);
		EnterRule(_localctx, 148, RULE_type_specifier_noprec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			type_specifier_nonarray();
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket) {
				{
				State = 764;
				Match(LeftBracket);
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53601192771854L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 432345564227559683L) != 0)) {
					{
					State = 765;
					constant_expression();
					}
				}

				State = 768;
				Match(RightBracket);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifier_nonarrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void_type() { return GetToken(GLSL_ES300Parser.Void_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool_type() { return GetToken(GLSL_ES300Parser.Bool_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int_type() { return GetToken(GLSL_ES300Parser.Int_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uint_type() { return GetToken(GLSL_ES300Parser.Uint_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float_type() { return GetToken(GLSL_ES300Parser.Float_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vec2_type() { return GetToken(GLSL_ES300Parser.Vec2_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vec3_type() { return GetToken(GLSL_ES300Parser.Vec3_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vec4_type() { return GetToken(GLSL_ES300Parser.Vec4_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bvec2_type() { return GetToken(GLSL_ES300Parser.Bvec2_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bvec3_type() { return GetToken(GLSL_ES300Parser.Bvec3_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bvec4_type() { return GetToken(GLSL_ES300Parser.Bvec4_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ivec2_type() { return GetToken(GLSL_ES300Parser.Ivec2_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ivec3_type() { return GetToken(GLSL_ES300Parser.Ivec3_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ivec4_type() { return GetToken(GLSL_ES300Parser.Ivec4_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uvec2_type() { return GetToken(GLSL_ES300Parser.Uvec2_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uvec3_type() { return GetToken(GLSL_ES300Parser.Uvec3_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uvec4_type() { return GetToken(GLSL_ES300Parser.Uvec4_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat2_type() { return GetToken(GLSL_ES300Parser.Mat2_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat3_type() { return GetToken(GLSL_ES300Parser.Mat3_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat4_type() { return GetToken(GLSL_ES300Parser.Mat4_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat2x2_type() { return GetToken(GLSL_ES300Parser.Mat2x2_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat2x3_type() { return GetToken(GLSL_ES300Parser.Mat2x3_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat2x4_type() { return GetToken(GLSL_ES300Parser.Mat2x4_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat3x2_type() { return GetToken(GLSL_ES300Parser.Mat3x2_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat3x3_type() { return GetToken(GLSL_ES300Parser.Mat3x3_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat3x4_type() { return GetToken(GLSL_ES300Parser.Mat3x4_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat4x2_type() { return GetToken(GLSL_ES300Parser.Mat4x2_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat4x3_type() { return GetToken(GLSL_ES300Parser.Mat4x3_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mat4x4_type() { return GetToken(GLSL_ES300Parser.Mat4x4_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sampler2D_type() { return GetToken(GLSL_ES300Parser.Sampler2D_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sampler3D_type() { return GetToken(GLSL_ES300Parser.Sampler3D_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SamplerCube_type() { return GetToken(GLSL_ES300Parser.SamplerCube_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SamplerCubeShadow_type() { return GetToken(GLSL_ES300Parser.SamplerCubeShadow_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sampler2DShadow_type() { return GetToken(GLSL_ES300Parser.Sampler2DShadow_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sampler2DArray_type() { return GetToken(GLSL_ES300Parser.Sampler2DArray_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sampler2DArrayShadow_type() { return GetToken(GLSL_ES300Parser.Sampler2DArrayShadow_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Isampler2D_type() { return GetToken(GLSL_ES300Parser.Isampler2D_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Isampler3D_type() { return GetToken(GLSL_ES300Parser.Isampler3D_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IsamplerCube_type() { return GetToken(GLSL_ES300Parser.IsamplerCube_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Isampler2DArray_type() { return GetToken(GLSL_ES300Parser.Isampler2DArray_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Usampler2D_type() { return GetToken(GLSL_ES300Parser.Usampler2D_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Usampler3D_type() { return GetToken(GLSL_ES300Parser.Usampler3D_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UsamplerCube_type() { return GetToken(GLSL_ES300Parser.UsamplerCube_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Usampler2DArray_type() { return GetToken(GLSL_ES300Parser.Usampler2DArray_type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_specifierContext struct_specifier() {
			return GetRuleContext<Struct_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		public Type_specifier_nonarrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier_nonarray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterType_specifier_nonarray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitType_specifier_nonarray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_specifier_nonarray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifier_nonarrayContext type_specifier_nonarray() {
		Type_specifier_nonarrayContext _localctx = new Type_specifier_nonarrayContext(Context, State);
		EnterRule(_localctx, 150, RULE_type_specifier_nonarray);
		try {
			State = 817;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void_type:
				EnterOuterAlt(_localctx, 1);
				{
				State = 771;
				Match(Void_type);
				}
				break;
			case Bool_type:
				EnterOuterAlt(_localctx, 2);
				{
				State = 772;
				Match(Bool_type);
				}
				break;
			case Int_type:
				EnterOuterAlt(_localctx, 3);
				{
				State = 773;
				Match(Int_type);
				}
				break;
			case Uint_type:
				EnterOuterAlt(_localctx, 4);
				{
				State = 774;
				Match(Uint_type);
				}
				break;
			case Float_type:
				EnterOuterAlt(_localctx, 5);
				{
				State = 775;
				Match(Float_type);
				}
				break;
			case Vec2_type:
				EnterOuterAlt(_localctx, 6);
				{
				State = 776;
				Match(Vec2_type);
				}
				break;
			case Vec3_type:
				EnterOuterAlt(_localctx, 7);
				{
				State = 777;
				Match(Vec3_type);
				}
				break;
			case Vec4_type:
				EnterOuterAlt(_localctx, 8);
				{
				State = 778;
				Match(Vec4_type);
				}
				break;
			case Bvec2_type:
				EnterOuterAlt(_localctx, 9);
				{
				State = 779;
				Match(Bvec2_type);
				}
				break;
			case Bvec3_type:
				EnterOuterAlt(_localctx, 10);
				{
				State = 780;
				Match(Bvec3_type);
				}
				break;
			case Bvec4_type:
				EnterOuterAlt(_localctx, 11);
				{
				State = 781;
				Match(Bvec4_type);
				}
				break;
			case Ivec2_type:
				EnterOuterAlt(_localctx, 12);
				{
				State = 782;
				Match(Ivec2_type);
				}
				break;
			case Ivec3_type:
				EnterOuterAlt(_localctx, 13);
				{
				State = 783;
				Match(Ivec3_type);
				}
				break;
			case Ivec4_type:
				EnterOuterAlt(_localctx, 14);
				{
				State = 784;
				Match(Ivec4_type);
				}
				break;
			case Uvec2_type:
				EnterOuterAlt(_localctx, 15);
				{
				State = 785;
				Match(Uvec2_type);
				}
				break;
			case Uvec3_type:
				EnterOuterAlt(_localctx, 16);
				{
				State = 786;
				Match(Uvec3_type);
				}
				break;
			case Uvec4_type:
				EnterOuterAlt(_localctx, 17);
				{
				State = 787;
				Match(Uvec4_type);
				}
				break;
			case Mat2_type:
				EnterOuterAlt(_localctx, 18);
				{
				State = 788;
				Match(Mat2_type);
				}
				break;
			case Mat3_type:
				EnterOuterAlt(_localctx, 19);
				{
				State = 789;
				Match(Mat3_type);
				}
				break;
			case Mat4_type:
				EnterOuterAlt(_localctx, 20);
				{
				State = 790;
				Match(Mat4_type);
				}
				break;
			case Mat2x2_type:
				EnterOuterAlt(_localctx, 21);
				{
				State = 791;
				Match(Mat2x2_type);
				}
				break;
			case Mat2x3_type:
				EnterOuterAlt(_localctx, 22);
				{
				State = 792;
				Match(Mat2x3_type);
				}
				break;
			case Mat2x4_type:
				EnterOuterAlt(_localctx, 23);
				{
				State = 793;
				Match(Mat2x4_type);
				}
				break;
			case Mat3x2_type:
				EnterOuterAlt(_localctx, 24);
				{
				State = 794;
				Match(Mat3x2_type);
				}
				break;
			case Mat3x3_type:
				EnterOuterAlt(_localctx, 25);
				{
				State = 795;
				Match(Mat3x3_type);
				}
				break;
			case Mat3x4_type:
				EnterOuterAlt(_localctx, 26);
				{
				State = 796;
				Match(Mat3x4_type);
				}
				break;
			case Mat4x2_type:
				EnterOuterAlt(_localctx, 27);
				{
				State = 797;
				Match(Mat4x2_type);
				}
				break;
			case Mat4x3_type:
				EnterOuterAlt(_localctx, 28);
				{
				State = 798;
				Match(Mat4x3_type);
				}
				break;
			case Mat4x4_type:
				EnterOuterAlt(_localctx, 29);
				{
				State = 799;
				Match(Mat4x4_type);
				}
				break;
			case Sampler2D_type:
				EnterOuterAlt(_localctx, 30);
				{
				State = 800;
				Match(Sampler2D_type);
				}
				break;
			case Sampler3D_type:
				EnterOuterAlt(_localctx, 31);
				{
				State = 801;
				Match(Sampler3D_type);
				}
				break;
			case SamplerCube_type:
				EnterOuterAlt(_localctx, 32);
				{
				State = 802;
				Match(SamplerCube_type);
				}
				break;
			case SamplerCubeShadow_type:
				EnterOuterAlt(_localctx, 33);
				{
				State = 803;
				Match(SamplerCubeShadow_type);
				}
				break;
			case Sampler2DShadow_type:
				EnterOuterAlt(_localctx, 34);
				{
				State = 804;
				Match(Sampler2DShadow_type);
				}
				break;
			case Sampler2DArray_type:
				EnterOuterAlt(_localctx, 35);
				{
				State = 805;
				Match(Sampler2DArray_type);
				}
				break;
			case Sampler2DArrayShadow_type:
				EnterOuterAlt(_localctx, 36);
				{
				State = 806;
				Match(Sampler2DArrayShadow_type);
				}
				break;
			case Isampler2D_type:
				EnterOuterAlt(_localctx, 37);
				{
				State = 807;
				Match(Isampler2D_type);
				}
				break;
			case Isampler3D_type:
				EnterOuterAlt(_localctx, 38);
				{
				State = 808;
				Match(Isampler3D_type);
				}
				break;
			case IsamplerCube_type:
				EnterOuterAlt(_localctx, 39);
				{
				State = 809;
				Match(IsamplerCube_type);
				}
				break;
			case Isampler2DArray_type:
				EnterOuterAlt(_localctx, 40);
				{
				State = 810;
				Match(Isampler2DArray_type);
				}
				break;
			case Usampler2D_type:
				EnterOuterAlt(_localctx, 41);
				{
				State = 811;
				Match(Usampler2D_type);
				}
				break;
			case Usampler3D_type:
				EnterOuterAlt(_localctx, 42);
				{
				State = 812;
				Match(Usampler3D_type);
				}
				break;
			case UsamplerCube_type:
				EnterOuterAlt(_localctx, 43);
				{
				State = 813;
				Match(UsamplerCube_type);
				}
				break;
			case Usampler2DArray_type:
				EnterOuterAlt(_localctx, 44);
				{
				State = 814;
				Match(Usampler2DArray_type);
				}
				break;
			case Struct:
				EnterOuterAlt(_localctx, 45);
				{
				State = 815;
				struct_specifier();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 46);
				{
				State = 816;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return external_declaration_list_sempred((External_declaration_listContext)_localctx, predIndex);
		case 7: return declaratorlist_sempred((DeclaratorlistContext)_localctx, predIndex);
		case 10: return multiplicative_expression_sempred((Multiplicative_expressionContext)_localctx, predIndex);
		case 11: return additive_expression_sempred((Additive_expressionContext)_localctx, predIndex);
		case 12: return shift_expression_sempred((Shift_expressionContext)_localctx, predIndex);
		case 13: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 14: return equality_expression_sempred((Equality_expressionContext)_localctx, predIndex);
		case 15: return and_expression_sempred((And_expressionContext)_localctx, predIndex);
		case 16: return exclusive_or_expression_sempred((Exclusive_or_expressionContext)_localctx, predIndex);
		case 17: return inclusive_or_expression_sempred((Inclusive_or_expressionContext)_localctx, predIndex);
		case 18: return logical_and_expression_sempred((Logical_and_expressionContext)_localctx, predIndex);
		case 19: return logical_xor_expression_sempred((Logical_xor_expressionContext)_localctx, predIndex);
		case 20: return logical_or_expression_sempred((Logical_or_expressionContext)_localctx, predIndex);
		case 24: return postfix_expression_sempred((Postfix_expressionContext)_localctx, predIndex);
		case 27: return function_call_header_with_parameters_sempred((Function_call_header_with_parametersContext)_localctx, predIndex);
		case 32: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 44: return statementlist_sempred((StatementlistContext)_localctx, predIndex);
		case 60: return struct_declaratorlist_sempred((Struct_declaratorlistContext)_localctx, predIndex);
		case 67: return layout_qualifier_idlist_sempred((Layout_qualifier_idlistContext)_localctx, predIndex);
		}
		return true;
	}
	private bool external_declaration_list_sempred(External_declaration_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declaratorlist_sempred(DeclaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicative_expression_sempred(Multiplicative_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive_expression_sempred(Additive_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shift_expression_sempred(Shift_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_expression_sempred(Equality_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool and_expression_sempred(And_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusive_or_expression_sempred(Exclusive_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusive_or_expression_sempred(Inclusive_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_and_expression_sempred(Logical_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_xor_expression_sempred(Logical_xor_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_or_expression_sempred(Logical_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfix_expression_sempred(Postfix_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 6);
		case 17: return Precpred(Context, 4);
		case 18: return Precpred(Context, 3);
		case 19: return Precpred(Context, 2);
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool function_call_header_with_parameters_sempred(Function_call_header_with_parametersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statementlist_sempred(StatementlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 1);
		}
		return true;
	}
	private bool struct_declaratorlist_sempred(Struct_declaratorlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 1);
		}
		return true;
	}
	private bool layout_qualifier_idlist_sempred(Layout_qualifier_idlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,128,820,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,3,0,154,8,0,1,0,
		3,0,157,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,166,8,1,10,1,12,1,169,9,1,
		1,2,1,2,1,3,1,3,3,3,175,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,201,8,5,3,5,
		203,8,5,1,5,1,5,1,5,1,5,1,5,3,5,210,8,5,1,6,1,6,3,6,214,8,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,3,6,223,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,3,6,239,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,3,7,255,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,5,7,269,8,7,10,7,12,7,272,9,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,281,
		8,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,289,8,10,10,10,12,10,292,9,10,1,
		11,1,11,1,11,1,11,1,11,1,11,5,11,300,8,11,10,11,12,11,303,9,11,1,12,1,
		12,1,12,1,12,1,12,1,12,5,12,311,8,12,10,12,12,12,314,9,12,1,13,1,13,1,
		13,1,13,1,13,1,13,5,13,322,8,13,10,13,12,13,325,9,13,1,14,1,14,1,14,1,
		14,1,14,1,14,5,14,333,8,14,10,14,12,14,336,9,14,1,15,1,15,1,15,1,15,1,
		15,1,15,5,15,344,8,15,10,15,12,15,347,9,15,1,16,1,16,1,16,1,16,1,16,1,
		16,5,16,355,8,16,10,16,12,16,358,9,16,1,17,1,17,1,17,1,17,1,17,1,17,5,
		17,366,8,17,10,17,12,17,369,9,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,377,
		8,18,10,18,12,18,380,9,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,388,8,19,
		10,19,12,19,391,9,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,399,8,20,10,20,
		12,20,402,9,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,410,8,21,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,3,22,420,8,22,1,23,1,23,1,24,1,24,1,24,3,24,
		427,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,5,24,444,8,24,10,24,12,24,447,9,24,1,25,1,25,1,25,1,25,1,
		25,1,25,3,25,455,8,25,1,26,1,26,3,26,459,8,26,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,5,27,468,8,27,10,27,12,27,471,9,27,1,28,1,28,1,28,1,29,1,29,
		1,29,3,29,479,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,5,
		32,491,8,32,10,32,12,32,494,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,3,33,504,8,33,1,34,1,34,1,34,1,35,1,35,3,35,511,8,35,1,36,1,36,1,36,
		1,36,1,37,1,37,1,37,5,37,520,8,37,10,37,12,37,523,9,37,1,38,3,38,526,8,
		38,1,38,3,38,529,8,38,1,38,1,38,3,38,533,8,38,1,38,3,38,536,8,38,1,38,
		3,38,539,8,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,547,8,39,1,40,1,40,1,
		41,1,41,1,42,1,42,1,43,1,43,3,43,557,8,43,1,43,1,43,1,44,1,44,1,44,1,44,
		1,44,5,44,566,8,44,10,44,12,44,569,9,44,1,45,1,45,3,45,573,8,45,1,46,1,
		46,1,46,1,46,1,46,1,46,1,46,3,46,582,8,46,1,47,1,47,1,47,1,47,1,47,1,47,
		3,47,590,8,47,1,47,1,47,1,47,3,47,595,8,47,1,48,1,48,1,48,1,48,1,48,1,
		48,3,48,603,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
		1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,626,8,49,1,50,1,
		50,3,50,630,8,50,1,51,3,51,633,8,51,1,51,1,51,3,51,637,8,51,1,52,1,52,
		1,52,1,52,1,52,1,52,3,52,645,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,653,
		8,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,664,8,54,1,55,3,
		55,667,8,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,3,58,676,8,58,1,58,1,58,
		1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,5,60,688,8,60,10,60,12,60,691,
		9,60,1,61,4,61,694,8,61,11,61,12,61,695,1,62,3,62,699,8,62,1,62,1,62,1,
		62,1,62,1,63,1,63,3,63,707,8,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,726,8,64,1,65,1,65,1,
		66,1,66,1,66,3,66,733,8,66,1,67,1,67,1,67,1,67,1,67,1,67,5,67,741,8,67,
		10,67,12,67,744,9,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,
		1,71,1,72,1,72,1,73,3,73,760,8,73,1,73,1,73,1,74,1,74,1,74,3,74,767,8,
		74,1,74,3,74,770,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,818,8,75,1,75,0,19,2,14,20,
		22,24,26,28,30,32,34,36,38,40,48,54,64,88,120,134,76,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
		144,146,148,150,0,12,2,0,40,41,43,43,1,0,38,39,1,0,54,55,1,0,50,53,2,0,
		47,47,59,59,1,0,17,19,1,0,10,12,1,0,1,2,1,0,36,37,2,0,9,11,13,15,2,0,38,
		39,44,45,2,0,46,46,60,69,887,0,153,1,0,0,0,2,160,1,0,0,0,4,170,1,0,0,0,
		6,174,1,0,0,0,8,176,1,0,0,0,10,209,1,0,0,0,12,238,1,0,0,0,14,240,1,0,0,
		0,16,273,1,0,0,0,18,280,1,0,0,0,20,282,1,0,0,0,22,293,1,0,0,0,24,304,1,
		0,0,0,26,315,1,0,0,0,28,326,1,0,0,0,30,337,1,0,0,0,32,348,1,0,0,0,34,359,
		1,0,0,0,36,370,1,0,0,0,38,381,1,0,0,0,40,392,1,0,0,0,42,403,1,0,0,0,44,
		419,1,0,0,0,46,421,1,0,0,0,48,426,1,0,0,0,50,454,1,0,0,0,52,456,1,0,0,
		0,54,460,1,0,0,0,56,472,1,0,0,0,58,478,1,0,0,0,60,480,1,0,0,0,62,482,1,
		0,0,0,64,484,1,0,0,0,66,503,1,0,0,0,68,505,1,0,0,0,70,508,1,0,0,0,72,512,
		1,0,0,0,74,516,1,0,0,0,76,538,1,0,0,0,78,540,1,0,0,0,80,548,1,0,0,0,82,
		550,1,0,0,0,84,552,1,0,0,0,86,554,1,0,0,0,88,560,1,0,0,0,90,572,1,0,0,
		0,92,581,1,0,0,0,94,594,1,0,0,0,96,602,1,0,0,0,98,625,1,0,0,0,100,629,
		1,0,0,0,102,632,1,0,0,0,104,644,1,0,0,0,106,646,1,0,0,0,108,656,1,0,0,
		0,110,666,1,0,0,0,112,670,1,0,0,0,114,672,1,0,0,0,116,675,1,0,0,0,118,
		679,1,0,0,0,120,681,1,0,0,0,122,693,1,0,0,0,124,698,1,0,0,0,126,704,1,
		0,0,0,128,725,1,0,0,0,130,727,1,0,0,0,132,729,1,0,0,0,134,734,1,0,0,0,
		136,745,1,0,0,0,138,750,1,0,0,0,140,752,1,0,0,0,142,754,1,0,0,0,144,756,
		1,0,0,0,146,759,1,0,0,0,148,763,1,0,0,0,150,817,1,0,0,0,152,154,3,4,2,
		0,153,152,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,157,3,2,1,0,156,
		155,1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,159,5,0,0,1,159,1,1,0,
		0,0,160,161,6,1,-1,0,161,162,3,6,3,0,162,167,1,0,0,0,163,164,10,1,0,0,
		164,166,3,6,3,0,165,163,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,
		1,0,0,0,168,3,1,0,0,0,169,167,1,0,0,0,170,171,5,127,0,0,171,5,1,0,0,0,
		172,175,3,8,4,0,173,175,3,10,5,0,174,172,1,0,0,0,174,173,1,0,0,0,175,7,
		1,0,0,0,176,177,3,68,34,0,177,178,3,86,43,0,178,9,1,0,0,0,179,180,3,68,
		34,0,180,181,5,72,0,0,181,210,1,0,0,0,182,183,3,14,7,0,183,184,5,72,0,
		0,184,210,1,0,0,0,185,186,5,16,0,0,186,187,3,80,40,0,187,188,3,148,74,
		0,188,189,5,72,0,0,189,210,1,0,0,0,190,191,3,128,64,0,191,192,5,128,0,
		0,192,193,5,76,0,0,193,194,3,122,61,0,194,202,5,77,0,0,195,200,5,128,0,
		0,196,197,5,80,0,0,197,198,3,114,57,0,198,199,5,81,0,0,199,201,1,0,0,0,
		200,196,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,195,1,0,0,0,202,203,
		1,0,0,0,203,204,1,0,0,0,204,205,5,72,0,0,205,210,1,0,0,0,206,207,3,128,
		64,0,207,208,5,72,0,0,208,210,1,0,0,0,209,179,1,0,0,0,209,182,1,0,0,0,
		209,185,1,0,0,0,209,190,1,0,0,0,209,206,1,0,0,0,210,11,1,0,0,0,211,213,
		3,116,58,0,212,214,5,128,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,239,1,
		0,0,0,215,216,3,116,58,0,216,217,5,128,0,0,217,218,5,80,0,0,218,219,3,
		114,57,0,219,222,5,81,0,0,220,221,5,46,0,0,221,223,3,16,8,0,222,220,1,
		0,0,0,222,223,1,0,0,0,223,239,1,0,0,0,224,225,3,116,58,0,225,226,5,128,
		0,0,226,227,5,80,0,0,227,228,5,81,0,0,228,229,5,46,0,0,229,230,3,16,8,
		0,230,239,1,0,0,0,231,232,3,116,58,0,232,233,5,128,0,0,233,234,5,46,0,
		0,234,235,3,16,8,0,235,239,1,0,0,0,236,237,5,34,0,0,237,239,5,128,0,0,
		238,211,1,0,0,0,238,215,1,0,0,0,238,224,1,0,0,0,238,231,1,0,0,0,238,236,
		1,0,0,0,239,13,1,0,0,0,240,241,6,7,-1,0,241,242,3,12,6,0,242,270,1,0,0,
		0,243,244,10,4,0,0,244,245,5,74,0,0,245,269,5,128,0,0,246,247,10,3,0,0,
		247,248,5,74,0,0,248,249,5,128,0,0,249,250,5,80,0,0,250,251,3,114,57,0,
		251,254,5,81,0,0,252,253,5,46,0,0,253,255,3,16,8,0,254,252,1,0,0,0,254,
		255,1,0,0,0,255,269,1,0,0,0,256,257,10,2,0,0,257,258,5,74,0,0,258,259,
		5,128,0,0,259,260,5,80,0,0,260,261,5,81,0,0,261,262,5,46,0,0,262,269,3,
		16,8,0,263,264,10,1,0,0,264,265,5,74,0,0,265,266,5,128,0,0,266,267,5,46,
		0,0,267,269,3,16,8,0,268,243,1,0,0,0,268,246,1,0,0,0,268,256,1,0,0,0,268,
		263,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,15,1,0,
		0,0,272,270,1,0,0,0,273,274,3,18,9,0,274,17,1,0,0,0,275,281,3,42,21,0,
		276,277,3,44,22,0,277,278,3,144,72,0,278,279,3,18,9,0,279,281,1,0,0,0,
		280,275,1,0,0,0,280,276,1,0,0,0,281,19,1,0,0,0,282,283,6,10,-1,0,283,284,
		3,44,22,0,284,290,1,0,0,0,285,286,10,1,0,0,286,287,7,0,0,0,287,289,3,44,
		22,0,288,285,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,
		21,1,0,0,0,292,290,1,0,0,0,293,294,6,11,-1,0,294,295,3,20,10,0,295,301,
		1,0,0,0,296,297,10,1,0,0,297,298,7,1,0,0,298,300,3,20,10,0,299,296,1,0,
		0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,23,1,0,0,0,303,
		301,1,0,0,0,304,305,6,12,-1,0,305,306,3,22,11,0,306,312,1,0,0,0,307,308,
		10,1,0,0,308,309,7,2,0,0,309,311,3,22,11,0,310,307,1,0,0,0,311,314,1,0,
		0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,25,1,0,0,0,314,312,1,0,0,0,315,
		316,6,13,-1,0,316,317,3,24,12,0,317,323,1,0,0,0,318,319,10,1,0,0,319,320,
		7,3,0,0,320,322,3,24,12,0,321,318,1,0,0,0,322,325,1,0,0,0,323,321,1,0,
		0,0,323,324,1,0,0,0,324,27,1,0,0,0,325,323,1,0,0,0,326,327,6,14,-1,0,327,
		328,3,26,13,0,328,334,1,0,0,0,329,330,10,1,0,0,330,331,7,4,0,0,331,333,
		3,26,13,0,332,329,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,
		0,0,335,29,1,0,0,0,336,334,1,0,0,0,337,338,6,15,-1,0,338,339,3,28,14,0,
		339,345,1,0,0,0,340,341,10,1,0,0,341,342,5,48,0,0,342,344,3,28,14,0,343,
		340,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,31,1,0,
		0,0,347,345,1,0,0,0,348,349,6,16,-1,0,349,350,3,30,15,0,350,356,1,0,0,
		0,351,352,10,1,0,0,352,353,5,49,0,0,353,355,3,30,15,0,354,351,1,0,0,0,
		355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,33,1,0,0,0,358,356,
		1,0,0,0,359,360,6,17,-1,0,360,361,3,32,16,0,361,367,1,0,0,0,362,363,10,
		1,0,0,363,364,5,42,0,0,364,366,3,32,16,0,365,362,1,0,0,0,366,369,1,0,0,
		0,367,365,1,0,0,0,367,368,1,0,0,0,368,35,1,0,0,0,369,367,1,0,0,0,370,371,
		6,18,-1,0,371,372,3,34,17,0,372,378,1,0,0,0,373,374,10,1,0,0,374,375,5,
		56,0,0,375,377,3,34,17,0,376,373,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,
		0,378,379,1,0,0,0,379,37,1,0,0,0,380,378,1,0,0,0,381,382,6,19,-1,0,382,
		383,3,36,18,0,383,389,1,0,0,0,384,385,10,1,0,0,385,386,5,58,0,0,386,388,
		3,36,18,0,387,384,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,
		0,0,390,39,1,0,0,0,391,389,1,0,0,0,392,393,6,20,-1,0,393,394,3,38,19,0,
		394,400,1,0,0,0,395,396,10,1,0,0,396,397,5,57,0,0,397,399,3,38,19,0,398,
		395,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,41,1,0,
		0,0,402,400,1,0,0,0,403,409,3,40,20,0,404,405,5,82,0,0,405,406,3,64,32,
		0,406,407,5,73,0,0,407,408,3,18,9,0,408,410,1,0,0,0,409,404,1,0,0,0,409,
		410,1,0,0,0,410,43,1,0,0,0,411,420,3,48,24,0,412,413,5,70,0,0,413,420,
		3,44,22,0,414,415,5,71,0,0,415,420,3,44,22,0,416,417,3,142,71,0,417,418,
		3,44,22,0,418,420,1,0,0,0,419,411,1,0,0,0,419,412,1,0,0,0,419,414,1,0,
		0,0,419,416,1,0,0,0,420,45,1,0,0,0,421,422,5,128,0,0,422,47,1,0,0,0,423,
		424,6,24,-1,0,424,427,3,66,33,0,425,427,3,50,25,0,426,423,1,0,0,0,426,
		425,1,0,0,0,427,445,1,0,0,0,428,429,10,6,0,0,429,430,5,80,0,0,430,431,
		3,62,31,0,431,432,5,81,0,0,432,444,1,0,0,0,433,434,10,4,0,0,434,435,5,
		75,0,0,435,444,3,50,25,0,436,437,10,3,0,0,437,438,5,75,0,0,438,444,3,46,
		23,0,439,440,10,2,0,0,440,444,5,70,0,0,441,442,10,1,0,0,442,444,5,71,0,
		0,443,428,1,0,0,0,443,433,1,0,0,0,443,436,1,0,0,0,443,439,1,0,0,0,443,
		441,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,49,1,0,
		0,0,447,445,1,0,0,0,448,449,3,54,27,0,449,450,5,79,0,0,450,455,1,0,0,0,
		451,452,3,52,26,0,452,453,5,79,0,0,453,455,1,0,0,0,454,448,1,0,0,0,454,
		451,1,0,0,0,455,51,1,0,0,0,456,458,3,56,28,0,457,459,5,83,0,0,458,457,
		1,0,0,0,458,459,1,0,0,0,459,53,1,0,0,0,460,461,6,27,-1,0,461,462,3,56,
		28,0,462,463,3,18,9,0,463,469,1,0,0,0,464,465,10,1,0,0,465,466,5,74,0,
		0,466,468,3,18,9,0,467,464,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,
		470,1,0,0,0,470,55,1,0,0,0,471,469,1,0,0,0,472,473,3,58,29,0,473,474,5,
		78,0,0,474,57,1,0,0,0,475,479,3,146,73,0,476,479,5,128,0,0,477,479,3,46,
		23,0,478,475,1,0,0,0,478,476,1,0,0,0,478,477,1,0,0,0,479,59,1,0,0,0,480,
		481,5,128,0,0,481,61,1,0,0,0,482,483,3,64,32,0,483,63,1,0,0,0,484,485,
		6,32,-1,0,485,486,3,18,9,0,486,492,1,0,0,0,487,488,10,1,0,0,488,489,5,
		74,0,0,489,491,3,18,9,0,490,487,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,
		0,492,493,1,0,0,0,493,65,1,0,0,0,494,492,1,0,0,0,495,504,3,60,30,0,496,
		504,5,2,0,0,497,504,5,1,0,0,498,504,5,3,0,0,499,500,5,78,0,0,500,501,3,
		64,32,0,501,502,5,79,0,0,502,504,1,0,0,0,503,495,1,0,0,0,503,496,1,0,0,
		0,503,497,1,0,0,0,503,498,1,0,0,0,503,499,1,0,0,0,504,67,1,0,0,0,505,506,
		3,70,35,0,506,507,5,79,0,0,507,69,1,0,0,0,508,510,3,72,36,0,509,511,3,
		74,37,0,510,509,1,0,0,0,510,511,1,0,0,0,511,71,1,0,0,0,512,513,3,116,58,
		0,513,514,5,128,0,0,514,515,5,78,0,0,515,73,1,0,0,0,516,521,3,76,38,0,
		517,518,5,74,0,0,518,520,3,76,38,0,519,517,1,0,0,0,520,523,1,0,0,0,521,
		519,1,0,0,0,521,522,1,0,0,0,522,75,1,0,0,0,523,521,1,0,0,0,524,526,3,84,
		42,0,525,524,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,529,3,82,41,0,
		528,527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,539,3,78,39,0,531,
		533,3,84,42,0,532,531,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,534,536,
		3,82,41,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,539,3,150,
		75,0,538,525,1,0,0,0,538,532,1,0,0,0,539,77,1,0,0,0,540,541,3,150,75,0,
		541,546,5,128,0,0,542,543,5,80,0,0,543,544,3,114,57,0,544,545,5,81,0,0,
		545,547,1,0,0,0,546,542,1,0,0,0,546,547,1,0,0,0,547,79,1,0,0,0,548,549,
		7,5,0,0,549,81,1,0,0,0,550,551,7,6,0,0,551,83,1,0,0,0,552,553,5,9,0,0,
		553,85,1,0,0,0,554,556,5,76,0,0,555,557,3,88,44,0,556,555,1,0,0,0,556,
		557,1,0,0,0,557,558,1,0,0,0,558,559,5,77,0,0,559,87,1,0,0,0,560,561,6,
		44,-1,0,561,562,3,90,45,0,562,567,1,0,0,0,563,564,10,1,0,0,564,566,3,90,
		45,0,565,563,1,0,0,0,566,569,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,
		89,1,0,0,0,569,567,1,0,0,0,570,573,3,86,43,0,571,573,3,92,46,0,572,570,
		1,0,0,0,572,571,1,0,0,0,573,91,1,0,0,0,574,582,3,112,56,0,575,582,3,110,
		55,0,576,582,3,108,54,0,577,582,3,106,53,0,578,582,3,104,52,0,579,582,
		3,98,49,0,580,582,3,94,47,0,581,574,1,0,0,0,581,575,1,0,0,0,581,576,1,
		0,0,0,581,577,1,0,0,0,581,578,1,0,0,0,581,579,1,0,0,0,581,580,1,0,0,0,
		582,93,1,0,0,0,583,584,5,30,0,0,584,595,5,72,0,0,585,586,5,31,0,0,586,
		595,5,72,0,0,587,589,5,32,0,0,588,590,3,64,32,0,589,588,1,0,0,0,589,590,
		1,0,0,0,590,591,1,0,0,0,591,595,5,72,0,0,592,593,5,33,0,0,593,595,5,72,
		0,0,594,583,1,0,0,0,594,585,1,0,0,0,594,587,1,0,0,0,594,592,1,0,0,0,595,
		95,1,0,0,0,596,603,3,64,32,0,597,598,3,116,58,0,598,599,5,128,0,0,599,
		600,5,46,0,0,600,601,3,16,8,0,601,603,1,0,0,0,602,596,1,0,0,0,602,597,
		1,0,0,0,603,97,1,0,0,0,604,605,5,27,0,0,605,606,5,78,0,0,606,607,3,96,
		48,0,607,608,5,79,0,0,608,609,3,90,45,0,609,626,1,0,0,0,610,611,5,28,0,
		0,611,612,3,90,45,0,612,613,5,27,0,0,613,614,5,78,0,0,614,615,3,64,32,
		0,615,616,5,79,0,0,616,617,5,72,0,0,617,626,1,0,0,0,618,619,5,29,0,0,619,
		620,5,78,0,0,620,621,3,100,50,0,621,622,3,102,51,0,622,623,5,79,0,0,623,
		624,3,90,45,0,624,626,1,0,0,0,625,604,1,0,0,0,625,610,1,0,0,0,625,618,
		1,0,0,0,626,99,1,0,0,0,627,630,3,110,55,0,628,630,3,112,56,0,629,627,1,
		0,0,0,629,628,1,0,0,0,630,101,1,0,0,0,631,633,3,96,48,0,632,631,1,0,0,
		0,632,633,1,0,0,0,633,634,1,0,0,0,634,636,5,72,0,0,635,637,3,64,32,0,636,
		635,1,0,0,0,636,637,1,0,0,0,637,103,1,0,0,0,638,639,5,25,0,0,639,640,3,
		64,32,0,640,641,5,73,0,0,641,645,1,0,0,0,642,643,5,26,0,0,643,645,5,73,
		0,0,644,638,1,0,0,0,644,642,1,0,0,0,645,105,1,0,0,0,646,647,5,24,0,0,647,
		648,5,78,0,0,648,649,3,64,32,0,649,650,5,79,0,0,650,652,5,76,0,0,651,653,
		3,88,44,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,5,77,
		0,0,655,107,1,0,0,0,656,657,5,22,0,0,657,658,5,78,0,0,658,659,3,64,32,
		0,659,660,5,79,0,0,660,663,3,90,45,0,661,662,5,23,0,0,662,664,3,90,45,
		0,663,661,1,0,0,0,663,664,1,0,0,0,664,109,1,0,0,0,665,667,3,64,32,0,666,
		665,1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,0,668,669,5,72,0,0,669,111,1,
		0,0,0,670,671,3,10,5,0,671,113,1,0,0,0,672,673,3,42,21,0,673,115,1,0,0,
		0,674,676,3,128,64,0,675,674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,
		678,3,150,75,0,678,117,1,0,0,0,679,680,7,7,0,0,680,119,1,0,0,0,681,682,
		6,60,-1,0,682,683,5,128,0,0,683,689,1,0,0,0,684,685,10,1,0,0,685,686,5,
		74,0,0,686,688,5,128,0,0,687,684,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,
		0,689,690,1,0,0,0,690,121,1,0,0,0,691,689,1,0,0,0,692,694,3,124,62,0,693,
		692,1,0,0,0,694,695,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,123,1,
		0,0,0,697,699,3,128,64,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,
		0,700,701,3,146,73,0,701,702,3,120,60,0,702,703,5,72,0,0,703,125,1,0,0,
		0,704,706,5,8,0,0,705,707,5,128,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,
		708,1,0,0,0,708,709,5,76,0,0,709,710,3,122,61,0,710,711,5,77,0,0,711,127,
		1,0,0,0,712,726,3,140,70,0,713,726,3,136,68,0,714,715,3,136,68,0,715,716,
		3,140,70,0,716,726,1,0,0,0,717,726,3,130,65,0,718,719,3,138,69,0,719,720,
		3,140,70,0,720,726,1,0,0,0,721,722,3,138,69,0,722,723,3,130,65,0,723,724,
		3,140,70,0,724,726,1,0,0,0,725,712,1,0,0,0,725,713,1,0,0,0,725,714,1,0,
		0,0,725,717,1,0,0,0,725,718,1,0,0,0,725,721,1,0,0,0,726,129,1,0,0,0,727,
		728,7,8,0,0,728,131,1,0,0,0,729,732,5,128,0,0,730,731,5,46,0,0,731,733,
		5,2,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,133,1,0,0,0,734,735,6,67,-1,
		0,735,736,3,132,66,0,736,742,1,0,0,0,737,738,10,1,0,0,738,739,5,74,0,0,
		739,741,3,132,66,0,740,737,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,
		743,1,0,0,0,743,135,1,0,0,0,744,742,1,0,0,0,745,746,5,35,0,0,746,747,5,
		78,0,0,747,748,3,134,67,0,748,749,5,79,0,0,749,137,1,0,0,0,750,751,5,34,
		0,0,751,139,1,0,0,0,752,753,7,9,0,0,753,141,1,0,0,0,754,755,7,10,0,0,755,
		143,1,0,0,0,756,757,7,11,0,0,757,145,1,0,0,0,758,760,3,80,40,0,759,758,
		1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,762,3,148,74,0,762,147,1,0,
		0,0,763,769,3,150,75,0,764,766,5,80,0,0,765,767,3,114,57,0,766,765,1,0,
		0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,770,5,81,0,0,769,764,1,0,0,0,769,
		770,1,0,0,0,770,149,1,0,0,0,771,818,5,83,0,0,772,818,5,84,0,0,773,818,
		5,85,0,0,774,818,5,86,0,0,775,818,5,87,0,0,776,818,5,88,0,0,777,818,5,
		89,0,0,778,818,5,90,0,0,779,818,5,91,0,0,780,818,5,92,0,0,781,818,5,93,
		0,0,782,818,5,94,0,0,783,818,5,95,0,0,784,818,5,96,0,0,785,818,5,97,0,
		0,786,818,5,98,0,0,787,818,5,99,0,0,788,818,5,100,0,0,789,818,5,101,0,
		0,790,818,5,102,0,0,791,818,5,103,0,0,792,818,5,104,0,0,793,818,5,105,
		0,0,794,818,5,106,0,0,795,818,5,107,0,0,796,818,5,108,0,0,797,818,5,109,
		0,0,798,818,5,110,0,0,799,818,5,111,0,0,800,818,5,112,0,0,801,818,5,113,
		0,0,802,818,5,114,0,0,803,818,5,115,0,0,804,818,5,116,0,0,805,818,5,117,
		0,0,806,818,5,118,0,0,807,818,5,119,0,0,808,818,5,120,0,0,809,818,5,121,
		0,0,810,818,5,122,0,0,811,818,5,123,0,0,812,818,5,124,0,0,813,818,5,125,
		0,0,814,818,5,126,0,0,815,818,3,126,63,0,816,818,5,128,0,0,817,771,1,0,
		0,0,817,772,1,0,0,0,817,773,1,0,0,0,817,774,1,0,0,0,817,775,1,0,0,0,817,
		776,1,0,0,0,817,777,1,0,0,0,817,778,1,0,0,0,817,779,1,0,0,0,817,780,1,
		0,0,0,817,781,1,0,0,0,817,782,1,0,0,0,817,783,1,0,0,0,817,784,1,0,0,0,
		817,785,1,0,0,0,817,786,1,0,0,0,817,787,1,0,0,0,817,788,1,0,0,0,817,789,
		1,0,0,0,817,790,1,0,0,0,817,791,1,0,0,0,817,792,1,0,0,0,817,793,1,0,0,
		0,817,794,1,0,0,0,817,795,1,0,0,0,817,796,1,0,0,0,817,797,1,0,0,0,817,
		798,1,0,0,0,817,799,1,0,0,0,817,800,1,0,0,0,817,801,1,0,0,0,817,802,1,
		0,0,0,817,803,1,0,0,0,817,804,1,0,0,0,817,805,1,0,0,0,817,806,1,0,0,0,
		817,807,1,0,0,0,817,808,1,0,0,0,817,809,1,0,0,0,817,810,1,0,0,0,817,811,
		1,0,0,0,817,812,1,0,0,0,817,813,1,0,0,0,817,814,1,0,0,0,817,815,1,0,0,
		0,817,816,1,0,0,0,818,151,1,0,0,0,71,153,156,167,174,200,202,209,213,222,
		238,254,268,270,280,290,301,312,323,334,345,356,367,378,389,400,409,419,
		426,443,445,454,458,469,478,492,503,510,521,525,528,532,535,538,546,556,
		567,572,581,589,594,602,625,629,632,636,644,652,663,666,675,689,695,698,
		706,725,732,742,759,766,769,817
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
