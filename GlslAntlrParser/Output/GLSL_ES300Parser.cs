//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GLSL_ES300Parser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class GLSL_ES300Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IdentifierNonDigit=1, Identifier=2, IntegerSuffix=3, DecimalLiteral=4, 
		OctalLiteral=5, HexadecimalLiteral=6, IntegerLiteral=7, Whitespace=8, 
		Newline=9, BlockComment=10, LineComment=11, Void_type=12, Bool_type=13, 
		Int_type=14, Uint_type=15, Float_type=16, Vec2_type=17, Vec3_type=18, 
		Vec4_type=19, Bvec2_type=20, Bvec3_type=21, Bvec4_type=22, Ivec2_type=23, 
		Ivec3_type=24, Ivec4_type=25, Uvec2_type=26, Uvec3_type=27, Uvec4_type=28, 
		Mat2_type=29, Mat3_type=30, Mat4_type=31, Mat2x2_type=32, Mat2x3_type=33, 
		Mat2x4_type=34, Mat3x2_type=35, Mat3x3_type=36, Mat3x4_type=37, Mat4x2_type=38, 
		Mat4x3_type=39, Mat4x4_type=40, Sampler2D_type=41, Sampler3D_type=42, 
		SamplerCube_type=43, SamplerCubeShadow_type=44, Sampler2DShadow_type=45, 
		Sampler2DArray_type=46, Sampler2DArrayShadow_type=47, Isampler2D_type=48, 
		Isampler3D_type=49, IsamplerCube_type=50, Isampler2DArray_type=51, Usampler2D_type=52, 
		Usampler3D_type=53, UsamplerCube_type=54, Usampler2DArray_type=55;
	public const int
		RULE_root = 0, RULE_declaration = 1, RULE_declarationlist = 2, RULE_variabledeclaration = 3, 
		RULE_literal = 4;
	public static readonly string[] ruleNames = {
		"root", "declaration", "declarationlist", "variabledeclaration", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'void'", "'bool'", "'int'", "'uint'", "'float'", "'vec2'", "'vec3'", 
		"'vec4'", "'bvec2'", "'bvec3'", "'bvec4'", "'ivec2'", "'ivec3'", "'ivec4'", 
		"'uvec2'", "'uvec3'", "'uvec4'", "'mat2'", "'mat3'", "'mat4'", "'mat2x2'", 
		"'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", 
		"'mat4x3'", "'mat4x4'", "'sampler2D'", "'sampler3D'", "'samplerCube'", 
		"'samplerCubeShadow'", "'sampler2DShadow'", "'sampler2DArray'", "'sampler2DArrayShadow'", 
		"'isampler2D'", "'isampler3D'", "'isamplerCube'", "'isampler2DArray'", 
		"'usampler2D'", "'usampler3D'", "'usamplerCube'", "'usampler2DArray'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IdentifierNonDigit", "Identifier", "IntegerSuffix", "DecimalLiteral", 
		"OctalLiteral", "HexadecimalLiteral", "IntegerLiteral", "Whitespace", 
		"Newline", "BlockComment", "LineComment", "Void_type", "Bool_type", "Int_type", 
		"Uint_type", "Float_type", "Vec2_type", "Vec3_type", "Vec4_type", "Bvec2_type", 
		"Bvec3_type", "Bvec4_type", "Ivec2_type", "Ivec3_type", "Ivec4_type", 
		"Uvec2_type", "Uvec3_type", "Uvec4_type", "Mat2_type", "Mat3_type", "Mat4_type", 
		"Mat2x2_type", "Mat2x3_type", "Mat2x4_type", "Mat3x2_type", "Mat3x3_type", 
		"Mat3x4_type", "Mat4x2_type", "Mat4x3_type", "Mat4x4_type", "Sampler2D_type", 
		"Sampler3D_type", "SamplerCube_type", "SamplerCubeShadow_type", "Sampler2DShadow_type", 
		"Sampler2DArray_type", "Sampler2DArrayShadow_type", "Isampler2D_type", 
		"Isampler3D_type", "IsamplerCube_type", "Isampler2DArray_type", "Usampler2D_type", 
		"Usampler3D_type", "UsamplerCube_type", "Usampler2DArray_type"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GLSL_ES300Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GLSL_ES300Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GLSL_ES300Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GLSL_ES300Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GLSL_ES300Parser.Eof, 0); }
		public DeclarationlistContext declarationlist() {
			return GetRuleContext<DeclarationlistContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 10; declarationlist(0);
				}
			}

			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public VariabledeclarationContext variabledeclaration() {
			return GetRuleContext<VariabledeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15; variabledeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationlistContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationlistContext declarationlist() {
			return GetRuleContext<DeclarationlistContext>(0);
		}
		public DeclarationlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterDeclarationlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitDeclarationlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationlistContext declarationlist() {
		return declarationlist(0);
	}

	private DeclarationlistContext declarationlist(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationlistContext _localctx = new DeclarationlistContext(Context, _parentState);
		DeclarationlistContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_declarationlist, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 18; declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 24;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationlistContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationlist);
					State = 20;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 21; declaration();
					}
					} 
				}
				State = 26;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariabledeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(GLSL_ES300Parser.Identifier, 0); }
		public VariabledeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variabledeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterVariabledeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitVariabledeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariabledeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariabledeclarationContext variabledeclaration() {
		VariabledeclarationContext _localctx = new VariabledeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_variabledeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(GLSL_ES300Parser.IntegerLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLSL_ES300ParserListener typedListener = listener as IGLSL_ES300ParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLSL_ES300ParserVisitor<TResult> typedVisitor = visitor as IGLSL_ES300ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 8, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return declarationlist_sempred((DeclarationlistContext)_localctx, predIndex);
		}
		return true;
	}
	private bool declarationlist_sempred(DeclarationlistContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\"', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x5', '\x2', '\xE', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x19', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x1C', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x3', 
		'\x6', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x2', '\x2', '\x1E', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x4', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x13', '\x3', '\x2', '\x2', '\x2', '\b', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xE', '\x5', '\x6', '\x4', '\x2', '\r', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\xE', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x10', '\a', '\x2', '\x2', '\x3', '\x10', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x5', '\b', '\x5', '\x2', 
		'\x12', '\x5', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\b', '\x4', 
		'\x1', '\x2', '\x14', '\x15', '\x5', '\x4', '\x3', '\x2', '\x15', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\f', '\x3', '\x2', '\x2', 
		'\x17', '\x19', '\x5', '\x4', '\x3', '\x2', '\x18', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\a', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1E', '\a', '\x4', '\x2', '\x2', '\x1E', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\t', '\x2', '\x2', ' ', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x4', '\r', '\x1A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
